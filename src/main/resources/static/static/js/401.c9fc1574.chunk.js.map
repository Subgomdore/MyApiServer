{"version":3,"file":"static/js/401.c9fc1574.chunk.js","mappings":"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","sources":["pages/upbit/UpbitMainPage.js","api/Api.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport {getUpbitList, ssePrice} from '../../api/Api';\r\nimport '../../layouts/css/UpbitMainPage.css';\r\n\r\nfunction UpbitMainPage() {\r\n    const [serverData, setServerData] = useState('');\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [selectedMarket, setSelectedMarket] = useState('all'); // 필터 상태 추가\r\n    const [filteredData, setFilteredData] = useState({ krwList: [], btcList: [], usdtList: [] });\r\n    const [krwBtcPrice, setKrwBtcPrice] = useState(null);\r\n\r\n    useEffect(() => {\r\n        getUpbitList().then(data => {\r\n            setServerData(data);\r\n            filterData(data, searchTerm, selectedMarket);\r\n        });\r\n    }, [searchTerm, selectedMarket]); // 검색어와 필터가 변경될 때마다 실행\r\n\r\n    useEffect(() => {\r\n        const eventSource = new EventSource('http://localhost:8080/api/sse/price');  // 백엔드의 SSE URL로 연결\r\n\r\n        eventSource.onmessage = (event) => {\r\n            const data = JSON.parse(event.data);\r\n            console.log(data)\r\n            if (data.market === \"KRW-BTC\") {\r\n                setKrwBtcPrice(data.price);  // 실시간 가격 업데이트\r\n            }\r\n        };\r\n\r\n        eventSource.onerror = (error) => {\r\n            console.error(\"SSE error:\", error);\r\n            eventSource.close();\r\n        };\r\n\r\n        return () => {\r\n            eventSource.close();  // 컴포넌트 언마운트 시 SSE 연결 해제\r\n        };\r\n    }, []);\r\n\r\n    const handleSearch = (e) => {\r\n        const search = e.target.value.toLowerCase();\r\n        setSearchTerm(search);\r\n        filterData(serverData, search, selectedMarket);\r\n    };\r\n\r\n    const handleMarketFilter = (e) => {\r\n        const market = e.target.value;\r\n        setSelectedMarket(market);\r\n        filterData(serverData, searchTerm, market);\r\n    };\r\n\r\n    const filterData = (data, search, market) => {\r\n        let krwList = [];\r\n        let btcList = [];\r\n        let usdtList = [];\r\n\r\n        for (let key in data) {\r\n            const marketKey = data[key].market;\r\n            if (\r\n                marketKey.startsWith('KRW-') &&\r\n                data[key].korean_name.toLowerCase().includes(search) &&\r\n                (market === 'all' || market === 'krw')\r\n            ) {\r\n                krwList.push(data[key]);\r\n            } else if (\r\n                marketKey.startsWith('BTC-') &&\r\n                data[key].korean_name.toLowerCase().includes(search) &&\r\n                (market === 'all' || market === 'btc')\r\n            ) {\r\n                btcList.push(data[key]);\r\n            } else if (\r\n                data[key].korean_name.toLowerCase().includes(search) &&\r\n                (market === 'all' || market === 'usdt')\r\n            ) {\r\n                usdtList.push(data[key]);\r\n            }\r\n        }\r\n        setFilteredData({ krwList, btcList, usdtList });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {/* 상단 버튼 및 검색바, 필터 */}\r\n            <div className=\"search-and-buttons\">\r\n                <div>\r\n                    <button onClick={() => alert('Button 1 Clicked!')}>Button 1</button>\r\n                    <button onClick={() => alert('Button 2 Clicked!')}>Button 2</button>\r\n                    <button onClick={() => alert('Button 3 Clicked!')}>Button 3</button>\r\n                </div>\r\n                <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Search by Korean Name...\"\r\n                        value={searchTerm}\r\n                        onChange={handleSearch}\r\n                    />\r\n                    {/* 필터 추가 */}\r\n                    <select value={selectedMarket} onChange={handleMarketFilter}>\r\n                        <option value=\"all\">All Markets</option>\r\n                        <option value=\"krw\">KRW Market</option>\r\n                        <option value=\"btc\">BTC Market</option>\r\n                        <option value=\"usdt\">USDT Market</option>\r\n                    </select>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"market-lists\">\r\n                {/* KRW List (좌측) */}\r\n                <div className=\"market-list\">\r\n                    <h3>KRW Market : {filteredData.krwList.length} 항목</h3>\r\n                    {filteredData.krwList.map((item, index) => (\r\n                        <div key={index} className=\"market-item\">\r\n                            <div>{item.korean_name} ({item.english_name})</div>\r\n                            <div>{item.market}</div>\r\n                            <div>{krwBtcPrice}</div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n\r\n                {/* BTC List (중앙) */}\r\n                <div className=\"market-list\">\r\n                    <h3>BTC Market : {filteredData.btcList.length} 항목</h3>\r\n                    {filteredData.btcList.map((item, index) => (\r\n                        <div key={index} className=\"market-item\">\r\n                            <div>{item.korean_name} ({item.english_name})</div>\r\n                            <div>{item.market}</div>\r\n                            <div>{item.price}</div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n\r\n                {/* USDT List (우측) */}\r\n                <div className=\"market-list\">\r\n                    <h3>USDT Market : {filteredData.usdtList.length} 항목</h3>\r\n                    {filteredData.usdtList.map((item, index) => (\r\n                        <div key={index} className=\"market-item\">\r\n                            <div>{item.korean_name} ({item.english_name})</div>\r\n                            <div>{item.market}</div>\r\n                            <div>{item.price}</div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UpbitMainPage;\r\n","import axios from 'axios';\r\n\r\n// Upbit 리스트를 가져오는 API\r\nexport const getUpbitList = async () => {\r\n    try {\r\n        const res = await axios.get('/api/upbit/list');\r\n        return res.data;\r\n    } catch (error) {\r\n        console.error('Failed to fetch Upbit list:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Upbit 데이터를 가져와서 동기화하는 API\r\nexport const fetchAndSync = async () => {\r\n    try {\r\n        const res = await axios.get('/api/upbit/fetchAndSync');\r\n        return res.data;\r\n    } catch (error) {\r\n        console.error('Failed to fetch and sync data:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const fetchPriceAndSync = async () => {\r\n    try {\r\n        const res = await axios.get('/api/upbit/pricesync');\r\n        return res.data;\r\n    } catch (error) {\r\n        console.error('Failed to fetch and sync data:', error);\r\n        throw error;\r\n    }\r\n};"],"names":["serverData","setServerData","useState","searchTerm","setSearchTerm","selectedMarket","setSelectedMarket","filteredData","setFilteredData","krwList","btcList","usdtList","krwBtcPrice","setKrwBtcPrice","useEffect","async","axios","get","data","error","console","getUpbitList","then","filterData","eventSource","EventSource","onmessage","event","JSON","parse","log","market","price","onerror","close","search","key","marketKey","startsWith","korean_name","toLowerCase","includes","push","_jsxs","children","className","_jsx","onClick","alert","style","display","alignItems","type","placeholder","value","onChange","e","target","length","map","item","index","english_name"],"sourceRoot":""}