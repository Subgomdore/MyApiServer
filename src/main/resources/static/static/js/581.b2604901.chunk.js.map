{"version":3,"file":"static/js/581.b2604901.chunk.js","mappings":"wIAGO,MAAMA,EAAeC,UACxB,IAEI,aADkBC,EAAAA,EAAMC,IAAI,yBACjBC,IACf,CAAE,MAAOC,GAEL,MADAC,QAAQD,MAAM,8BAA+BA,GACvCA,CACV,GAISE,EAAuBN,UAChC,IAEI,aADkBC,EAAAA,EAAMC,IAAI,0BACjBC,IACf,CAAC,MAAOC,GAEJ,MADAC,QAAQD,MAAM,8BAA+BA,GACvCA,CACV,E,4ECqDJ,QAvEA,SAAyBG,GAA8F,IAA7F,WAAEC,EAAU,aAAEC,EAAY,eAAEC,EAAc,mBAAEC,EAAkB,cAAEC,EAAa,UAAEC,GAAWN,EAChH,MAAOO,EAAaC,IAAkBC,EAAAA,EAAAA,WAAS,GAsC/C,OAlBAC,EAAAA,EAAAA,YAAU,KACN,MAAMC,EAAiBC,IACfA,EAAMC,SAAWC,OAAOC,SAASF,SAGjCD,EAAMhB,KAAKoB,YAAcJ,EAAMhB,KAAKqB,SACpCZ,EAAcO,EAAMhB,KACxB,EAMJ,OAHAkB,OAAOI,iBAAiB,UAAWP,GAG5B,KACHG,OAAOK,oBAAoB,UAAWR,EAAc,CACvD,GACF,CAACN,KAGAe,EAAAA,EAAAA,MAAA,OAAKC,UAAU,qBAAoBC,SAAA,EAC/BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAEzBC,EAAAA,EAAAA,KAAA,UAAQF,UAAU,gBAAgBG,QAvC5BC,KACAX,OAAOY,KACjB,qCACA,cACA,yCAIAlB,GAAe,GAEfmB,MAAM,iKACV,EA4B6DL,SAAC,4CAGtDC,EAAAA,EAAAA,KAAA,UAAQF,UAAU,gBAAgBG,QAASlB,EAAUgB,SAAC,uCAEtDC,EAAAA,EAAAA,KAAA,UAAQF,UAAU,gBAAgBG,QAASA,IAAMG,MAAM,qBAAqBL,SAAC,iBAIjFF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBC,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,SACIK,KAAK,OACLC,YAAY,2BACZC,MAAO7B,EACP8B,SAAU7B,EACVmB,UAAU,kBAEdD,EAAAA,EAAAA,MAAA,UAAQU,MAAO3B,EAAgB4B,SAAU3B,EAAoBiB,UAAU,gBAAeC,SAAA,EAClFC,EAAAA,EAAAA,KAAA,UAAQO,MAAM,MAAKR,SAAC,iBACpBC,EAAAA,EAAAA,KAAA,UAAQO,MAAM,MAAKR,SAAC,gBACpBC,EAAAA,EAAAA,KAAA,UAAQO,MAAM,MAAKR,SAAC,gBACpBC,EAAAA,EAAAA,KAAA,UAAQO,MAAM,OAAMR,SAAC,wBAKzC,ECOA,QA7EA,SAAmBtB,GAAmE,IAAlE,MAAEgC,EAAK,MAAEC,EAAK,SAAEC,EAAQ,iBAAEC,EAAgB,kBAAEC,GAAmBpC,EAC/E,MAAOqC,EAAWC,IAAgB7B,EAAAA,EAAAA,UAAS,QACpC8B,EAAWC,IAAgB/B,EAAAA,EAAAA,UAAS,QACpCgC,EAAYC,IAAiBjC,EAAAA,EAAAA,UAAS,OAoB7C,OACIW,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaC,SAAA,EACxBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,qBAAoBC,UAC/BF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,CAAKU,EAAM,MAAIC,EAAMU,OAAO,sBAEhCvB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,yBAAwBC,SAAA,EACnCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cACVuB,MAAO,CAACC,QAAS,OAAQC,oBAAqB,cAAeC,IAAK,OAAQC,WAAY,UAAU1B,SAAA,EACjGC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,cAAcuB,MAAO,CAACK,YAAa,iBAAkBC,UAAW,UAAU5B,UACrFF,EAAAA,EAAAA,MAAA,UAAQC,UAAW,eAAegB,IAAab,QA3B1C2B,KACrB,MAAMC,EAAyB,QAAdf,EAAsB,OAAS,MAChDC,EAAac,GACbjB,EAAiBiB,EAAS,EAwB+D9B,SAAA,CAAC,8BAChD,QAAde,EAAsB,SAAM,SAAI,UAGhDd,EAAAA,EAAAA,KAAA,OAAKF,UAAU,cAAcuB,MAAO,CAACK,YAAa,iBAAkBC,UAAW,UAAU5B,UACrFF,EAAAA,EAAAA,MAAA,UAAQC,UAAW,eAAekB,IAAaf,QA1B1C6B,KACrB,MAAMD,EAAyB,QAAdb,EAAsB,OAAS,MAChDC,EAAaY,GACbjB,EAAiBiB,EAAS,EAuB+D9B,SAAA,CAAC,8BAChD,QAAdiB,EAAsB,SAAM,SAAI,UAGhDhB,EAAAA,EAAAA,KAAA,OAAKF,UAAU,eAAeuB,MAAO,CAACM,UAAW,UAAU5B,UACvDF,EAAAA,EAAAA,MAAA,UAAQC,UAAW,eAAeoB,IAAcjB,QAzB1C8B,KACtB,MAAMF,EAA0B,QAAfX,EAAuB,OAAS,MACjDC,EAAcU,GACdhB,EAAkBgB,EAAS,EAsBgE9B,SAAA,CAAC,8BACjD,QAAfmB,EAAuB,SAAM,SAAI,YAKpDR,EAAMsB,KAAI,CAACC,EAAMC,KACdrC,EAAAA,EAAAA,MAAA,OAAiBC,UAAW,eAAemC,EAAKE,mBAAoBd,MAAO,CACvEC,QAAS,OACTC,oBAAqB,cACrBC,IAAK,OACLC,WAAY,UACd1B,SAAA,EACEF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAcuB,MAAO,CAChCK,YAAa,iBACbC,UAAW,UACb5B,SAAA,CAAEkC,EAAKG,aAAe,eAAe,KAACpC,EAAAA,EAAAA,KAAA,SAAK,IAAEiC,EAAKI,cAAgB,eAAe,QAEnFrC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,cACVuB,MAAO,CAACK,YAAa,iBAAkBC,UAAW,UAAU5B,SAAEkC,EAAKK,QAAU,SAClFzC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAeuB,MAAO,CAACM,UAAW,UAAU5B,SAAA,CACtDkC,EAAKM,MAAQN,EAAKM,OAAmB,eAAV9B,EAAyB,UAAO,IAAM,sBACvD,eAAVA,GAA0BwB,EAAKM,OAAS5B,IACrCX,EAAAA,EAAAA,KAAA,OAAKqB,MAAO,CAACmB,SAAU,QAAQzC,UACzBY,EAAW8B,WAAWR,EAAKM,QAAQG,iBAAmB,iBAjB9DR,UA0B9B,ECkHA,QAxLA,WACI,MAAOxD,EAAYiE,IAAiBzD,EAAAA,EAAAA,UAAS,KACtCN,EAAgBgE,IAAqB1D,EAAAA,EAAAA,UAAS,QAC9C2D,EAAcC,IAAmB5D,EAAAA,EAAAA,UAAS,CAAC6D,QAAS,GAAIC,QAAS,GAAIC,SAAU,MAC/EtC,EAAUuC,IAAehE,EAAAA,EAAAA,UAAS,IAClCiE,EAAeC,IAAoBlE,EAAAA,EAAAA,UAAS,OAMnDC,EAAAA,EAAAA,YAAU,KACYjB,WACd,MAAMG,QAAaJ,EAAAA,EAAAA,KACnBoF,EAAiBhF,EAAK,EAE1BU,EAAW,GACZ,CAACL,EAAYE,KAEhBO,EAAAA,EAAAA,YAAU,KACN,MAAMmE,EAAc,IAAIC,YAAY,GAAGhE,OAAOC,SAASF,wBAKjDkE,EAAeC,aAHFC,KACfC,MAAM,GAAGpE,OAAOC,SAASF,uBAAuBsE,MAAMrF,QAAQD,MAAM,GAE3B,KAU7C,OARAgF,EAAY3D,iBAAiB,SAAUN,IACnC,MAAMwE,EAAaC,KAAKC,MAAM1E,EAAMhB,MACV,YAAtBwF,EAAWvB,QACXY,EAAYW,EAAWG,aAE3BC,EAAYJ,EAAW,IAGpB,KACHP,EAAYY,QACZC,cAAcX,EAAa,CAC9B,GACF,IAEH,MAIM5C,EAAmBA,CAACwD,EAASC,KAC/BvB,GAAgBwB,IAAQ,IACjBA,EACH,CAACF,GAAU,IAAIE,EAASF,IAAUG,MAAK,CAACC,EAAGC,IACzB,QAAVJ,EACOG,EAAEpC,YAAYsC,cAAcD,EAAErC,aAE9BqC,EAAErC,YAAYsC,cAAcF,EAAEpC,kBAG9C,EAGDvB,EAAoBA,CAACuD,EAASC,KAChCvB,GAAgBwB,IAAQ,IACjBA,EACH,CAACF,GAAU,IAAIE,EAASF,IAAUG,MAAK,CAACC,EAAGC,IACzB,QAAVJ,EACO5B,WAAW+B,EAAER,aAAevB,WAAWgC,EAAET,aAEzCvB,WAAWgC,EAAET,aAAevB,WAAW+B,EAAER,kBAGzD,EAGDX,EAAoBsB,IACtB,IAAI5B,EAAU,GAAIC,EAAU,GAAIC,EAAW,GAG3C0B,EAAQC,SAAS3C,IACb,MAAM4C,EAAY5C,EAAKK,OACjBwC,EAAa7C,EAAK+B,YAClBe,EAAmB9C,EAAK+C,mBAE9B/C,EAAKM,MAAQuC,EACb7C,EAAK+C,mBAAqBD,EAC1B9C,EAAKE,iBAAmB8C,EAAoBH,EAAYC,GAGtC,YAAdF,GACA3B,EAAYjB,EAAKM,OAIjB2C,EAAajD,EAAM4C,KACfA,EAAUM,WAAW,QACrBpC,EAAQqC,KAAKnD,GACN4C,EAAUM,WAAW,QAC5BnC,EAAQoC,KAAKnD,GACN4C,EAAUM,WAAW,UAC5BlC,EAASmC,KAAKnD,GAEtB,IAIJa,EAAgB,CAACC,UAASC,UAASC,YAAU,EAI3CiC,EAAeA,CAAC7G,EAAMwG,IACjBxG,EAAK+D,YAAYiD,cAAcC,SAAS5G,KACvB,QAAnBE,GACuB,QAAnBA,GAA4BiG,EAAUM,WAAW,SAC9B,QAAnBvG,GAA4BiG,EAAUM,WAAW,SAC9B,SAAnBvG,GAA6BiG,EAAUM,WAAW,UAGzDlB,EAAeJ,IACjBf,GAAgBwB,IACZ,MAAMiB,EAAiBjB,EAASvB,QAAQf,KAAIC,IACxC,GAAIA,EAAKK,SAAWuB,EAAWvB,OAAQ,CACnC,MAAMkD,EAAWC,OAAOxD,EAAKM,OACvBmD,EAAWD,OAAO5B,EAAWG,aAC7B7B,EAAmBuD,EAAWF,EAAW,kBAAoB,oBAWnE,OATAG,YAAW,KACP7C,GAAgB8C,IAAI,IACbA,EACH7C,QAAS6C,EAAK7C,QAAQf,KAAI6D,GAAKA,EAAEvD,SAAWuB,EAAWvB,OAAS,IACzDuD,EACH1D,iBAAkBA,EAAiB2D,QAAQ,UAAW,KACtDD,OACL,GACJ,KACI,IACA5D,EACHM,MAAOmD,EACPvD,mBAER,CACA,OAAOF,CAAI,IAEf,MAAO,IAAIqC,EAAUvB,QAASwC,EAAe,GAC/C,EAGAN,EAAsBA,CAAC1C,EAAOwC,IAC5BxC,EAAQwC,EAAyB,WACjCxC,EAAQwC,EAAyB,aAC9B,eAGX,OACIlF,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAC+F,EAAgB,CACbrH,WAAYA,EACZC,aAhHUqH,GAAMrD,EAAcqD,EAAEC,OAAO1F,MAAM8E,eAiH7CzG,eAAgBA,EAChBC,mBAhHgBmH,GAAMpD,EAAkBoD,EAAEC,OAAO1F,UAkHrDV,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EACzBC,EAAAA,EAAAA,KAACkG,EAAU,CACPzF,MAAM,aACNC,MAAOmC,EAAaE,QACpBpC,SAAUA,EACVC,iBAAmByD,GAAUzD,EAAiB,UAAWyD,GACzDxD,kBAAoBwD,GAAUxD,EAAkB,UAAWwD,MAE/DrE,EAAAA,EAAAA,KAACkG,EAAU,CACPzF,MAAM,aACNC,MAAOmC,EAAaG,QACpBrC,SAAUA,EACVC,iBAAmByD,GAAUzD,EAAiB,UAAWyD,GACzDxD,kBAAoBwD,GAAUxD,EAAkB,UAAWwD,MAE/DrE,EAAAA,EAAAA,KAACkG,EAAU,CACPzF,MAAM,cACNC,MAAOmC,EAAaI,SACpBtC,SAAUA,EACVC,iBAAmByD,GAAUzD,EAAiB,WAAYyD,GAC1DxD,kBAAoBwD,GAAUxD,EAAkB,WAAYwD,UAKhF,C","sources":["api/Api.js","components/SearchAndButtons.js","components/MarketList.js","pages/upbit/UpbitMainPage.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Upbit 리스트를 가져오는 API\r\nexport const getUpbitList = async () => {\r\n    try {\r\n        const res = await axios.get('/api/upbit/priceList');\r\n        return res.data;\r\n    } catch (error) {\r\n        console.error('Failed to fetch Upbit list:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n\r\nexport const postUpbitFilterData  = async () => {\r\n    try {\r\n        const res = await axios.get('/api/upbit/filterdata')\r\n        return res.data;\r\n    }catch (error) {\r\n        console.error('Failed to fetch FilterData:', error);\r\n        throw error;\r\n    }\r\n\r\n}","import React, { useEffect, useState } from 'react';\r\nimport '../css/components/SearchAndButtons.css';\r\n\r\nfunction SearchAndButtons({ searchTerm, handleSearch, selectedMarket, handleMarketFilter, onFilterApply, fetchData }) {\r\n    const [isPopupOpen, setIsPopupOpen] = useState(false);\r\n\r\n    // 팝업 열기 함수\r\n    const openPopup = () => {\r\n        const popup = window.open(\r\n            `http://localhost:3000/filter-popup`, // 3000번 포트를 명시적으로 지정\r\n            \"FilterPopup\", // 팝업 이름\r\n            \"width=800,height=600,left=300,top=200\" // 팝업 창 크기 및 위치 설정\r\n        );\r\n\r\n        if (popup) {\r\n            setIsPopupOpen(true); // 팝업이 성공적으로 열렸는지 확인\r\n        } else {\r\n            alert(\"팝업 차단이 활성화되어 있습니다. 팝업 차단을 해제해주세요.\"); // 팝업 차단 알림\r\n        }\r\n    };\r\n\r\n\r\n\r\n    // 팝업에서 필터 데이터를 받는 이벤트 핸들러\r\n    useEffect(() => {\r\n        const handleMessage = (event) => {\r\n            if (event.origin !== window.location.origin) return;  // 안전한 출처 확인\r\n\r\n            // 필터 데이터를 수신했을 때\r\n            if (event.data.priceRange || event.data.volume) {\r\n                onFilterApply(event.data);  // 부모 컴포넌트로 필터 데이터를 전달\r\n            }\r\n        };\r\n\r\n        window.addEventListener('message', handleMessage);\r\n\r\n        // 컴포넌트 언마운트 시 이벤트 제거\r\n        return () => {\r\n            window.removeEventListener('message', handleMessage);\r\n        };\r\n    }, [onFilterApply]);\r\n\r\n    return (\r\n        <div className=\"search-and-buttons\">\r\n            <div className=\"button-group\">\r\n                {/* 팝업 열기 버튼 */}\r\n                <button className=\"custom-button\" onClick={openPopup}> 검색필터 추가</button>\r\n\r\n                {/* 기본 데이터 가져오기 버튼 */}\r\n                <button className=\"custom-button\" onClick={fetchData}> 필터 초기화 </button>\r\n\r\n                <button className=\"custom-button\" onClick={() => alert('Button 3 Clicked!')}>Button 3</button>\r\n            </div>\r\n\r\n            {/* 검색창 및 필터 */}\r\n            <div className=\"search-and-filter\">\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Search by Korean Name...\"\r\n                    value={searchTerm}\r\n                    onChange={handleSearch}\r\n                    className=\"search-input\"\r\n                />\r\n                <select value={selectedMarket} onChange={handleMarketFilter} className=\"market-select\">\r\n                    <option value=\"all\">All Markets</option>\r\n                    <option value=\"krw\">KRW Market</option>\r\n                    <option value=\"btc\">BTC Market</option>\r\n                    <option value=\"usdt\">USDT Market</option>\r\n                </select>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchAndButtons;\r\n","import React, { useState } from 'react';\r\n\r\nfunction MarketList({ title, items, btcPrice, handleSortByName, handleSortByPrice }) {\r\n    const [nameOrder, setNameOrder] = useState('asc');\r\n    const [codeOrder, setCodeOrder] = useState('asc');\r\n    const [priceOrder, setPriceOrder] = useState('asc');\r\n\r\n    const toggleSortByName = () => {\r\n        const newOrder = nameOrder === 'asc' ? 'desc' : 'asc';\r\n        setNameOrder(newOrder);\r\n        handleSortByName(newOrder);\r\n    };\r\n\r\n    const toggleSortByCode = () => {\r\n        const newOrder = codeOrder === 'asc' ? 'desc' : 'asc';\r\n        setCodeOrder(newOrder);\r\n        handleSortByName(newOrder); // Assuming handleSortByName for code as well, replace if needed\r\n    };\r\n\r\n    const toggleSortByPrice = () => {\r\n        const newOrder = priceOrder === 'asc' ? 'desc' : 'asc';\r\n        setPriceOrder(newOrder);\r\n        handleSortByPrice(newOrder);\r\n    };\r\n\r\n    return (\r\n        <div className=\"market-list\">\r\n            <div className=\"market-list-header\">\r\n                <h3>{title} : {items.length} 항목</h3>\r\n            </div>\r\n            <div className=\"market-items-container\">\r\n                <div className=\"market-item\"\r\n                     style={{display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', gap: '10px', alignItems: 'center'}}>\r\n                    <div className=\"market-name\" style={{borderRight: '1px solid #ccc', textAlign: 'center'}}>\r\n                        <button className={`sort-button ${nameOrder}`} onClick={toggleSortByName}>\r\n                            이름 정렬 ({nameOrder === 'asc' ? '▲' : '▼'})\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"market-code\" style={{borderRight: '1px solid #ccc', textAlign: 'center'}}>\r\n                        <button className={`sort-button ${codeOrder}`} onClick={toggleSortByCode}>\r\n                            코인 정렬 ({codeOrder === 'asc' ? '▲' : '▼'})\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"market-price\" style={{textAlign: 'center'}}>\r\n                        <button className={`sort-button ${priceOrder}`} onClick={toggleSortByPrice}>\r\n                            가격 정렬 ({priceOrder === 'asc' ? '▲' : '▼'})\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n\r\n                {items.map((item, index) => (\r\n                    <div key={index} className={`market-item ${item.priceChangeClass}`} style={{\r\n                        display: 'grid',\r\n                        gridTemplateColumns: '2fr 1fr 1fr',\r\n                        gap: '10px',\r\n                        alignItems: 'center'\r\n                    }}>\r\n                        <div className=\"market-name\" style={{\r\n                            borderRight: '1px solid #ccc',\r\n                            textAlign: 'center'\r\n                        }}>{item.korean_name || 'Unknown Name'} <br/>({item.english_name || 'Unknown Name'})\r\n                        </div>\r\n                        <div className=\"market-code\"\r\n                             style={{borderRight: '1px solid #ccc', textAlign: 'center'}}>{item.market || 'N/A'}</div>\r\n                        <div className=\"market-price\" style={{textAlign: 'center'}}>\r\n                            {item.price ? item.price + (title === 'KRW Market' ? ' 원' : '') : 'Price not available'}\r\n                            {title === 'BTC Market' && item.price && btcPrice && (\r\n                                <div style={{fontSize: '10px'}}>\r\n                                    {(btcPrice * parseFloat(item.price)).toLocaleString() + ' 원'}\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MarketList;\r\n","import React, {useEffect, useState} from 'react';\r\nimport {getUpbitList} from '../../api/Api';\r\nimport '../../css/pages/upbit/UpbitMainPage.css';\r\nimport '../../css/pages/upbit/PriceAnimation.css';\r\nimport SearchAndButtons from \"../../components/SearchAndButtons\";\r\nimport MarketList from \"../../components/MarketList\";\r\n\r\nfunction UpbitMainPage() {\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [selectedMarket, setSelectedMarket] = useState('all');\r\n    const [filteredData, setFilteredData] = useState({krwList: [], btcList: [], usdtList: []});\r\n    const [btcPrice, setBtcPrice] = useState(0);\r\n    const [selectedPanel, setSelectedPanel] = useState(null);\r\n\r\n    const handlePanelClick = (panel) => {\r\n        setSelectedPanel(panel === selectedPanel ? null : panel);\r\n    };\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const data = await getUpbitList();\r\n            filterAndSetData(data); // 서버에서 받은 데이터 필드에 맞춰 필터링 및 설정\r\n        };\r\n        fetchData();\r\n    }, [searchTerm, selectedMarket]);\r\n\r\n    useEffect(() => {\r\n        const eventSource = new EventSource(`${window.location.origin}/api/sse/price`);\r\n\r\n        const pingServer = () => {\r\n            fetch(`${window.location.origin}/api/sse/ping`).catch(console.error);\r\n        };\r\n        const pingInterval = setInterval(pingServer, 10000);\r\n\r\n        eventSource.addEventListener(\"price\", (event) => {\r\n            const parsedData = JSON.parse(event.data);\r\n            if (parsedData.market === 'KRW-BTC') {\r\n                setBtcPrice(parsedData.trade_price); // 그대로 사용\r\n            }\r\n            updatePrice(parsedData); // 실시간 가격 업데이트\r\n        });\r\n\r\n        return () => {\r\n            eventSource.close();\r\n            clearInterval(pingInterval);\r\n        };\r\n    }, []);\r\n\r\n    const handleSearch = (e) => setSearchTerm(e.target.value.toLowerCase());\r\n\r\n    const handleMarketFilter = (e) => setSelectedMarket(e.target.value);\r\n\r\n    const handleSortByName = (listKey, order) => {\r\n        setFilteredData(prevData => ({\r\n            ...prevData,\r\n            [listKey]: [...prevData[listKey]].sort((a, b) => {\r\n                if (order === 'asc') {\r\n                    return a.korean_name.localeCompare(b.korean_name);\r\n                } else {\r\n                    return b.korean_name.localeCompare(a.korean_name);\r\n                }\r\n            })\r\n        }));\r\n    };\r\n\r\n    const handleSortByPrice = (listKey, order) => {\r\n        setFilteredData(prevData => ({\r\n            ...prevData,\r\n            [listKey]: [...prevData[listKey]].sort((a, b) => {\r\n                if (order === 'asc') {\r\n                    return parseFloat(a.trade_price) - parseFloat(b.trade_price); // 문자열 그대로 사용\r\n                } else {\r\n                    return parseFloat(b.trade_price) - parseFloat(a.trade_price); // 문자열 그대로 사용\r\n                }\r\n            })\r\n        }));\r\n    };\r\n\r\n    const filterAndSetData = (allData) => {\r\n        let krwList = [], btcList = [], usdtList = [];\r\n\r\n        // allData가 COIN과 PRICE가 아니라 리스트로 들어오는 경우 바로 처리\r\n        allData.forEach((item) => {\r\n            const marketKey = item.market; // 각 아이템의 market 키 사용\r\n            const tradePrice = item.trade_price; // 현재 가격\r\n            const prevClosingPrice = item.prev_closing_price; // 전일 종가\r\n\r\n            item.price = tradePrice; // 가격 설정\r\n            item.prev_closing_price = prevClosingPrice; // 전일 종가 설정\r\n            item.priceChangeClass = getPriceChangeClass(tradePrice, prevClosingPrice); // 가격 변화 클래스 계산\r\n\r\n            // KRW-BTC 가격이면 별도로 저장\r\n            if (marketKey === 'KRW-BTC') {\r\n                setBtcPrice(item.price);\r\n            }\r\n\r\n            // 마켓 필터링하여 각 리스트에 넣음\r\n            if (filterMarket(item, marketKey)) {\r\n                if (marketKey.startsWith('KRW-')) {\r\n                    krwList.push(item);\r\n                } else if (marketKey.startsWith('BTC-')) {\r\n                    btcList.push(item);\r\n                } else if (marketKey.startsWith('USDT-')) {\r\n                    usdtList.push(item);\r\n                }\r\n            }\r\n        });\r\n\r\n        // 필터링된 데이터를 상태로 저장\r\n        setFilteredData({krwList, btcList, usdtList});\r\n    };\r\n\r\n\r\n    const filterMarket = (data, marketKey) => {\r\n        return data.korean_name.toLowerCase().includes(searchTerm) &&\r\n            (selectedMarket === 'all' ||\r\n                (selectedMarket === 'krw' && marketKey.startsWith('KRW-')) ||\r\n                (selectedMarket === 'btc' && marketKey.startsWith('BTC-')) ||\r\n                (selectedMarket === 'usdt' && marketKey.startsWith('USDT-')));\r\n    };\r\n\r\n    const updatePrice = (parsedData) => {\r\n        setFilteredData(prevData => {\r\n            const updatedKrwList = prevData.krwList.map(item => {\r\n                if (item.market === parsedData.market) {\r\n                    const oldPrice = Number(item.price);\r\n                    const newPrice = Number(parsedData.trade_price);\r\n                    const priceChangeClass = newPrice > oldPrice ? 'price-up change' : 'price-down change';\r\n\r\n                    setTimeout(() => {\r\n                        setFilteredData(prev => ({\r\n                            ...prev,\r\n                            krwList: prev.krwList.map(i => i.market === parsedData.market ? {\r\n                                ...i,\r\n                                priceChangeClass: priceChangeClass.replace(' change', '')\r\n                            } : i)\r\n                        }));\r\n                    }, 300);\r\n                    return {\r\n                        ...item,\r\n                        price: newPrice,  // 그대로 사용\r\n                        priceChangeClass\r\n                    };\r\n                }\r\n                return item;\r\n            });\r\n            return {...prevData, krwList: updatedKrwList};\r\n        });\r\n    };\r\n\r\n    const getPriceChangeClass = (price, prevClosingPrice) => {\r\n        if (price > prevClosingPrice) return 'price-up';\r\n        if (price < prevClosingPrice) return 'price-down';\r\n        return 'price-stable';\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <SearchAndButtons\r\n                searchTerm={searchTerm}\r\n                handleSearch={handleSearch}\r\n                selectedMarket={selectedMarket}\r\n                handleMarketFilter={handleMarketFilter}\r\n            />\r\n            <div className=\"market-lists\">\r\n                <MarketList\r\n                    title=\"KRW Market\"\r\n                    items={filteredData.krwList}\r\n                    btcPrice={btcPrice}\r\n                    handleSortByName={(order) => handleSortByName('krwList', order)}\r\n                    handleSortByPrice={(order) => handleSortByPrice('krwList', order)}\r\n                />\r\n                <MarketList\r\n                    title=\"BTC Market\"\r\n                    items={filteredData.btcList}\r\n                    btcPrice={btcPrice}\r\n                    handleSortByName={(order) => handleSortByName('btcList', order)}\r\n                    handleSortByPrice={(order) => handleSortByPrice('btcList', order)}\r\n                />\r\n                <MarketList\r\n                    title=\"USDT Market\"\r\n                    items={filteredData.usdtList}\r\n                    btcPrice={btcPrice}\r\n                    handleSortByName={(order) => handleSortByName('usdtList', order)}\r\n                    handleSortByPrice={(order) => handleSortByPrice('usdtList', order)}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UpbitMainPage;\r\n"],"names":["getUpbitList","async","axios","get","data","error","console","postUpbitFilterData","_ref","searchTerm","handleSearch","selectedMarket","handleMarketFilter","onFilterApply","fetchData","isPopupOpen","setIsPopupOpen","useState","useEffect","handleMessage","event","origin","window","location","priceRange","volume","addEventListener","removeEventListener","_jsxs","className","children","_jsx","onClick","openPopup","open","alert","type","placeholder","value","onChange","title","items","btcPrice","handleSortByName","handleSortByPrice","nameOrder","setNameOrder","codeOrder","setCodeOrder","priceOrder","setPriceOrder","length","style","display","gridTemplateColumns","gap","alignItems","borderRight","textAlign","toggleSortByName","newOrder","toggleSortByCode","toggleSortByPrice","map","item","index","priceChangeClass","korean_name","english_name","market","price","fontSize","parseFloat","toLocaleString","setSearchTerm","setSelectedMarket","filteredData","setFilteredData","krwList","btcList","usdtList","setBtcPrice","selectedPanel","setSelectedPanel","filterAndSetData","eventSource","EventSource","pingInterval","setInterval","pingServer","fetch","catch","parsedData","JSON","parse","trade_price","updatePrice","close","clearInterval","listKey","order","prevData","sort","a","b","localeCompare","allData","forEach","marketKey","tradePrice","prevClosingPrice","prev_closing_price","getPriceChangeClass","filterMarket","startsWith","push","toLowerCase","includes","updatedKrwList","oldPrice","Number","newPrice","setTimeout","prev","i","replace","SearchAndButtons","e","target","MarketList"],"sourceRoot":""}