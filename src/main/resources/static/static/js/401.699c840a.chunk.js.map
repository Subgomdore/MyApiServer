{"version":3,"file":"static/js/401.699c840a.chunk.js","mappings":"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","sources":["pages/upbit/UpbitMainPage.js","api/Api.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { getUpbitList } from '../../api/Api';\r\nimport '../../layouts/css/UpbitMainPage.css';\r\n\r\nfunction UpbitMainPage() {\r\n    const [serverData, setServerData] = useState('');\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [selectedMarket, setSelectedMarket] = useState('all'); // 필터 상태 추가\r\n    const [filteredData, setFilteredData] = useState({ krwList: [], btcList: [], usdtList: [] });\r\n    const [priceData, setPriceData] = useState({});\r\n    const [btcPrice, setBtcPrice] = useState(0);\r\n\r\n    useEffect(() => {\r\n        getUpbitList().then(data => {\r\n            setServerData(data);\r\n            filterData(data, searchTerm, selectedMarket);\r\n        });\r\n    }, [searchTerm, selectedMarket]); // 검색어와 필터가 변경될 때마다 실행\r\n\r\n    // useEffect(() => {\r\n    //     const url = window.location.protocol + '//' + window.location.host;\r\n    //     const eventSource = new EventSource(url + '/api/sse/price');\r\n    //\r\n    //     eventSource.addEventListener(\"price\", (event) => {\r\n    //         let parsedData = JSON.parse(event.data);\r\n    //\r\n    //         // 현재 BTC 가격을 추출하여 상태로 저장\r\n    //         if (parsedData.code === 'KRW-BTC') {\r\n    //             setBtcPrice(parsedData.trade_price); // BTC 가격 상태로 저장\r\n    //         }\r\n    //\r\n    //         // 가격을 형식에 맞게 처리 (소수점 뒤 0 제거)\r\n    //         const number = parsedData.trade_price.toFixed(10);\r\n    //         const formattedNum = number.replace(/\\.?0+$/, '');\r\n    //\r\n    //         // priceData 상태 업데이트\r\n    //         setPriceData(prevData => ({\r\n    //             ...prevData,\r\n    //             [parsedData.code]: formattedNum // 각 시장의 가격 업데이트\r\n    //         }));\r\n    //     });\r\n    //\r\n    //     return () => {\r\n    //         console.log(\"Closing SSE connection\");\r\n    //         eventSource.close();\r\n    //     };\r\n    // }, []);\r\n\r\n    const handleSearch = (e) => {\r\n        const search = e.target.value.toLowerCase();\r\n        setSearchTerm(search);\r\n        filterData(serverData, search, selectedMarket);\r\n    };\r\n\r\n    const handleMarketFilter = (e) => {\r\n        const market = e.target.value;\r\n        setSelectedMarket(market);\r\n        filterData(serverData, searchTerm, market);\r\n    };\r\n\r\n    const filterData = (data, search, market) => {\r\n        let krwList = [];\r\n        let btcList = [];\r\n        let usdtList = [];\r\n\r\n        for (let key in data) {\r\n            const marketKey = data[key].market;\r\n            if (\r\n                marketKey.startsWith('KRW-') &&\r\n                data[key].korean_name.toLowerCase().includes(search) &&\r\n                (market === 'all' || market === 'krw')\r\n            ) {\r\n                krwList.push(data[key]);\r\n            } else if (\r\n                marketKey.startsWith('BTC-') &&\r\n                data[key].korean_name.toLowerCase().includes(search) &&\r\n                (market === 'all' || market === 'btc')\r\n            ) {\r\n                btcList.push(data[key]);\r\n            } else if (\r\n                data[key].korean_name.toLowerCase().includes(search) &&\r\n                (market === 'all' || market === 'usdt')\r\n            ) {\r\n                usdtList.push(data[key]);\r\n            }\r\n        }\r\n        setFilteredData({ krwList, btcList, usdtList });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {/* 상단 버튼 및 검색바, 필터 */}\r\n            <div className=\"search-and-buttons\">\r\n                <div>\r\n                    <button onClick={() => alert('Button 1 Clicked!')}>Button 1</button>\r\n                    <button onClick={() => alert('Button 2 Clicked!')}>Button 2</button>\r\n                    <button onClick={() => alert('Button 3 Clicked!')}>Button 3</button>\r\n                </div>\r\n                <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Search by Korean Name...\"\r\n                        value={searchTerm}\r\n                        onChange={handleSearch}\r\n                    />\r\n                    {/* 필터 추가 */}\r\n                    <select value={selectedMarket} onChange={handleMarketFilter}>\r\n                        <option value=\"all\">All Markets</option>\r\n                        <option value=\"krw\">KRW Market</option>\r\n                        <option value=\"btc\">BTC Market</option>\r\n                        <option value=\"usdt\">USDT Market</option>\r\n                    </select>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"market-lists\">\r\n                {/* KRW List (좌측) */}\r\n                <div className=\"market-list\">\r\n                    <h3>KRW Market : {filteredData.krwList.length} 항목</h3>\r\n                    {filteredData.krwList.map((item, index) => (\r\n                        <div key={index} className=\"market-item\">\r\n                            <div className=\"market-name\">{item.korean_name} ({item.english_name})</div>\r\n                            <div className=\"market-code\">{item.market}</div>\r\n                            <div className=\"market-price\">{priceData && priceData[item.market] ? parseInt(priceData[item.market]).toLocaleString() + ' 원' : 'Price not available'}</div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n\r\n                {/* BTC List (중앙) */}\r\n                <div className=\"market-list\">\r\n                    <h3>BTC Market : {filteredData.btcList.length} 항목</h3>\r\n                    {filteredData.btcList.map((item, index) => (\r\n                        <div key={index} className=\"market-item\">\r\n                            <div className=\"market-name\">{item.korean_name} ({item.english_name})</div>\r\n                            <div className=\"market-code\">{item.market}</div>\r\n                            <div className=\"market-price\">\r\n                                {priceData && priceData[item.market] ? priceData[item.market] : 'Price not available'}\r\n                                <div style={{ fontSize: '10px', color: 'midnightblue'}}>\r\n                                    {btcPrice && priceData[item.market] ? (btcPrice * priceData[item.market]).toLocaleString().replace(/\\..*/, '') + ' 원' : ''}\r\n                                </div>\r\n                            </div>\r\n\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n\r\n                {/* USDT List (우측) */}\r\n                <div className=\"market-list\">\r\n                    <h3>USDT Market : {filteredData.usdtList.length} 항목</h3>\r\n                    {filteredData.usdtList.map((item, index) => (\r\n                        <div key={index} className=\"market-item\">\r\n                            <div className=\"market-name\">{item.korean_name} ({item.english_name})</div>\r\n                            <div className=\"market-code\">{item.market}</div>\r\n                            <div className=\"market-price\">{priceData && priceData[item.market] ? priceData[item.market].toLocaleString() : 'Price not available'}</div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UpbitMainPage;\r\n","import axios from 'axios';\r\n\r\n// Upbit 리스트를 가져오는 API\r\nexport const getUpbitList = async () => {\r\n    try {\r\n        const res = await axios.get('/api/upbit/list');\r\n        return res.data;\r\n    } catch (error) {\r\n        console.error('Failed to fetch Upbit list:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n\r\n// // Upbit 데이터를 가져와서 동기화하는 API\r\n// export const fetchAndSync = async () => {\r\n//     try {\r\n//         const res = await axios.get('/api/upbit/fetchAndSync');\r\n//         return res.data;\r\n//     } catch (error) {\r\n//         console.error('Failed to fetch and sync data:', error);\r\n//         throw error;\r\n//     }\r\n// };\r\n//\r\n// export const fetchPriceAndSync = async () => {\r\n//     try {\r\n//         const res = await axios.get('/api/upbit/pricesync');\r\n//         return res.data;\r\n//     } catch (error) {\r\n//         console.error('Failed to fetch and sync data:', error);\r\n//         throw error;\r\n//     }\r\n// };"],"names":["serverData","setServerData","useState","searchTerm","setSearchTerm","selectedMarket","setSelectedMarket","filteredData","setFilteredData","krwList","btcList","usdtList","priceData","setPriceData","btcPrice","setBtcPrice","useEffect","async","axios","get","data","error","console","getUpbitList","then","filterData","search","market","key","marketKey","startsWith","korean_name","toLowerCase","includes","push","_jsxs","children","className","_jsx","onClick","alert","style","display","alignItems","type","placeholder","value","onChange","e","target","length","map","item","index","english_name","parseInt","toLocaleString","fontSize","color","replace"],"sourceRoot":""}