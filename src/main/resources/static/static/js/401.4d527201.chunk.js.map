{"version":3,"file":"static/js/401.4d527201.chunk.js","mappings":"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","sources":["pages/upbit/UpbitMainPage.js","api/Api.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { getUpbitList } from '../../api/Api';\r\nimport '../../layouts/css/UpbitMainPage.css';\r\n\r\nfunction UpbitMainPage() {\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [selectedMarket, setSelectedMarket] = useState('all'); // 필터 상태 추가\r\n    const [filteredData, setFilteredData] = useState({ krwList: [], btcList: [], usdtList: [] });\r\n    const [btcPrice, setBtcPrice] = useState(0);\r\n\r\n    useEffect(() => {\r\n        getUpbitList().then(data => {\r\n            filterData(data, searchTerm, selectedMarket);\r\n        });\r\n    }, [searchTerm, selectedMarket]); // 검색어와 필터가 변경될 때마다 실행\r\n\r\n    useEffect(() => {\r\n        const url = window.location.protocol + '//' + window.location.host;\r\n        const eventSource = new EventSource(url + '/api/sse/price');\r\n\r\n        eventSource.addEventListener(\"price\", (event) => {\r\n            let parsedData = JSON.parse(event.data);\r\n            if (parsedData.code === 'KRW-BTC') {\r\n                setBtcPrice(parsedData.trade_price); // BTC 가격 상태로 저장\r\n            }\r\n\r\n            // SSE로 수신된 가격 데이터를 filteredData에 업데이트\r\n            setFilteredData(prevData => {\r\n                const updatedKrwList = prevData.krwList.map(item => {\r\n                    if (item.market === parsedData.code) {\r\n                        const price = parsedData.trade_price;\r\n                        return {\r\n                            ...item,\r\n                            price: formatPrice(price) // 가격 형식화\r\n                        };\r\n                    }\r\n                    return item;\r\n                });\r\n\r\n                const updatedBtcList = prevData.btcList.map(item => {\r\n                    if (item.market === parsedData.code) {\r\n                        const price = parsedData.trade_price;\r\n                        return {\r\n                            ...item,\r\n                            price: formatPrice(price) // 가격 형식화\r\n                        };\r\n                    }\r\n                    return item;\r\n                });\r\n\r\n                return {\r\n                    ...prevData,\r\n                    krwList: updatedKrwList,\r\n                    btcList: updatedBtcList\r\n                };\r\n            });\r\n        });\r\n\r\n        return () => {\r\n            console.log(\"Closing SSE connection\");\r\n            eventSource.close();\r\n        };\r\n    }, []); // 한 번만 실행\r\n\r\n    const formatPrice = (price) => {\r\n        // 숫자로 변환 후 소수점 이하 처리\r\n        let num = Number(price);\r\n\r\n        if (num > 1) {\r\n            return Math.floor(num).toString(); // 소수점 이하 제거\r\n        } else if (num < 1) {\r\n            // 1보다 작은 경우 유효한 자리수만 표시\r\n            const convertValue = num.toFixed(10);\r\n            console.log(convertValue)\r\n            //return num.toString().replace(/\\.?0+$/, ''); // 소수점 이하 0 제거\r\n            return convertValue.replace(/\\.?0+$/, '');\r\n        } else if (!isNaN(num)) {\r\n            // 지수형 숫자 처리\r\n            return num.toString(); // 숫자로 변환하여 문자열로 반환\r\n        }\r\n        return 'Price not available'; // 가격이 0인 경우\r\n    };\r\n\r\n    const handleSearch = (e) => {\r\n        const search = e.target.value.toLowerCase();\r\n        setSearchTerm(search);\r\n        filterData(filteredData, search, selectedMarket);\r\n    };\r\n\r\n    const handleMarketFilter = (e) => {\r\n        const market = e.target.value;\r\n        setSelectedMarket(market);\r\n        filterData(filteredData, searchTerm, market);\r\n    };\r\n\r\n    const filterData = (allData, search, market) => {\r\n        let krwList = [];\r\n        let btcList = [];\r\n        let usdtList = [];\r\n\r\n        const data = allData['COIN'];\r\n        const priceList = allData['PRICE'];\r\n\r\n        for (let key in data) {\r\n            const marketKey = data[key].market;\r\n\r\n            // 가격 초기화\r\n            for (let key2 in priceList) {\r\n                if (priceList[key2].market === marketKey) {\r\n                    data[key].price = formatPrice(priceList[key2].trade_price); // 소수점 이하 제거\r\n                }\r\n            }\r\n\r\n            if (marketKey.startsWith('KRW-') && data[key].korean_name.toLowerCase().includes(search) && (market === 'all' || market === 'krw')) {\r\n                krwList.push(data[key]);\r\n            } else if (marketKey.startsWith('BTC-') && data[key].korean_name.toLowerCase().includes(search) && (market === 'all' || market === 'btc')) {\r\n                btcList.push(data[key]);\r\n            } else if (data[key].korean_name.toLowerCase().includes(search) && (market === 'all' || market === 'usdt')) {\r\n                usdtList.push(data[key]);\r\n            }\r\n        }\r\n\r\n        setFilteredData({ krwList, btcList, usdtList });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {/* 상단 버튼 및 검색바, 필터 */}\r\n            <div className=\"search-and-buttons\">\r\n                <div>\r\n                    <button onClick={() => alert('Button 1 Clicked!')}>Button 1</button>\r\n                    <button onClick={() => alert('Button 2 Clicked!')}>Button 2</button>\r\n                    <button onClick={() => alert('Button 3 Clicked!')}>Button 3</button>\r\n                </div>\r\n                <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Search by Korean Name...\"\r\n                        value={searchTerm}\r\n                        onChange={handleSearch}\r\n                    />\r\n                    {/* 필터 추가 */}\r\n                    <select value={selectedMarket} onChange={handleMarketFilter}>\r\n                        <option value=\"all\">All Markets</option>\r\n                        <option value=\"krw\">KRW Market</option>\r\n                        <option value=\"btc\">BTC Market</option>\r\n                        <option value=\"usdt\">USDT Market</option>\r\n                    </select>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"market-lists\">\r\n                {/* KRW List (좌측) */}\r\n                <div className=\"market-list\">\r\n                    <h3>KRW Market : {filteredData.krwList.length} 항목</h3>\r\n                    {filteredData.krwList.map((item, index) => (\r\n                        <div key={index} className=\"market-item\">\r\n                            <div className=\"market-name\">{item.korean_name} ({item.english_name})</div>\r\n                            <div className=\"market-code\">{item.market}</div>\r\n                            <div className=\"market-price\">\r\n                                {item.price ? parseInt(item.price).toLocaleString() + ' 원' : 'Price not available'}\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n\r\n                {/* BTC List (중앙) */}\r\n                <div className=\"market-list\">\r\n                    <h3>BTC Market : {filteredData.btcList.length} 항목</h3>\r\n                    {filteredData.btcList.map((item, index) => (\r\n                        <div key={index} className=\"market-item\">\r\n                            <div className=\"market-name\">{item.korean_name} ({item.english_name})</div>\r\n                            <div className=\"market-code\">{item.market}</div>\r\n                            <div className=\"market-price\">\r\n                                {item.price ? item.price + ' 원' : 'Price not available'}\r\n                                <div style={{ fontSize: '10px', color: 'midnightblue' }}>\r\n                                    환산가격\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n\r\n                {/* USDT List (우측) */}\r\n                <div className=\"market-list\">\r\n                    <h3>USDT Market : {filteredData.usdtList.length} 항목</h3>\r\n                    {filteredData.usdtList.map((item, index) => (\r\n                        <div key={index} className=\"market-item\">\r\n                            <div className=\"market-name\">{item.korean_name} ({item.english_name})</div>\r\n                            <div className=\"market-code\">{item.market}</div>\r\n                            <div className=\"market-price\">\r\n                                {item.price ? item.price.toLocaleString() : 'Price not available'}\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UpbitMainPage;\r\n","import axios from 'axios';\r\n\r\n// Upbit 리스트를 가져오는 API\r\nexport const getUpbitList = async () => {\r\n    try {\r\n        const res = await axios.get('/api/upbit/priceList');\r\n        return res.data;\r\n    } catch (error) {\r\n        console.error('Failed to fetch Upbit list:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n\r\n// // Upbit 데이터를 가져와서 동기화하는 API\r\n// export const fetchAndSync = async () => {\r\n//     try {\r\n//         const res = await axios.get('/api/upbit/fetchAndSync');\r\n//         return res.data;\r\n//     } catch (error) {\r\n//         console.error('Failed to fetch and sync data:', error);\r\n//         throw error;\r\n//     }\r\n// };\r\n//\r\n// export const fetchPriceAndSync = async () => {\r\n//     try {\r\n//         const res = await axios.get('/api/upbit/pricesync');\r\n//         return res.data;\r\n//     } catch (error) {\r\n//         console.error('Failed to fetch and sync data:', error);\r\n//         throw error;\r\n//     }\r\n// };"],"names":["searchTerm","setSearchTerm","useState","selectedMarket","setSelectedMarket","filteredData","setFilteredData","krwList","btcList","usdtList","btcPrice","setBtcPrice","useEffect","async","axios","get","data","error","console","getUpbitList","then","filterData","url","window","location","protocol","host","eventSource","EventSource","addEventListener","event","parsedData","JSON","parse","code","trade_price","prevData","updatedKrwList","map","item","market","price","formatPrice","updatedBtcList","log","close","num","Number","Math","floor","toString","convertValue","toFixed","replace","isNaN","allData","search","priceList","key","marketKey","key2","startsWith","korean_name","toLowerCase","includes","push","_jsxs","children","className","_jsx","onClick","alert","style","display","alignItems","type","placeholder","value","onChange","e","target","length","index","english_name","parseInt","toLocaleString","fontSize","color"],"sourceRoot":""}