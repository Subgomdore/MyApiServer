{"version":3,"file":"static/js/361.0eed0d93.chunk.js","mappings":"kKAwOA,QAnOA,WACI,MAAOA,EAAYC,IAAiBC,EAAAA,EAAAA,UAAS,KACtCC,EAAgBC,IAAqBF,EAAAA,EAAAA,UAAS,QAC9CG,EAAcC,IAAmBJ,EAAAA,EAAAA,UAAS,CAAEK,QAAS,GAAIC,QAAS,GAAIC,SAAU,MAChFC,EAAUC,IAAeT,EAAAA,EAAAA,UAAS,IAEzCU,EAAAA,EAAAA,YAAU,KCRcC,WACxB,IAEI,aADkBC,EAAAA,EAAMC,IAAI,yBACjBC,IACf,CAAE,MAAOC,GAEL,MADAC,QAAQD,MAAM,8BAA+BA,GACvCA,CACV,GDEIE,GAAeC,MAAKJ,IAChBK,EAAWL,EAAMhB,EAAYG,EAAe,GAC9C,GACH,CAACH,EAAYG,KAEhBS,EAAAA,EAAAA,YAAU,KACN,MAAMU,EAAMC,OAAOC,SAASC,SAAW,KAAOF,OAAOC,SAASE,KACxDC,EAAc,IAAIC,YAAYN,EAAM,kBAQpCO,EAAeC,aALFC,KACfC,MAAMV,EAAM,iBAAiBW,OAAMhB,GAASC,QAAQD,MAAM,eAAgBA,IAAO,GAIxC,KA+C7C,OA7CAU,EAAYO,iBAAiB,SAAUC,IACnC,IAAIC,EAAaC,KAAKC,MAAMH,EAAMnB,MAEV,YAApBoB,EAAWG,MACX5B,EAAYyB,EAAWI,aAI3BlC,GAAgBmC,IACZ,MAAMC,EAAiBD,EAASlC,QAAQoC,KAAIC,IACxC,GAAIA,EAAKC,SAAWT,EAAWG,KAAM,CACjC,MAAMO,EAAWC,OAAOH,EAAKI,OACvBC,EAAWF,OAAOX,EAAWI,aAC7BU,EAAmBD,EAAWH,EAAW,kBAAoB,oBAgBnE,OAdAK,YAAW,KACP7C,GAAgB8C,IACL,IACAA,EACH7C,QAAS6C,EAAK7C,QAAQoC,KAAIU,GAClBA,EAAER,SAAWT,EAAWG,KACjB,IAAKc,EAAGH,iBAAkBA,EAAiBI,QAAQ,UAAW,KAElED,OAGjB,GACH,KAEI,IACAT,EACHI,MAAOO,EAAYN,GACnBC,iBAAkBA,EAE1B,CACA,OAAON,CAAI,IAGf,MAAO,IACAH,EACHlC,QAASmC,EACZ,GACH,IAGC,KACHxB,QAAQsC,IAAI,0BACZ7B,EAAY8B,QACZC,cAAc7B,EAAa,CAC9B,GACF,IAGH,MAAM0B,EAAeP,IAEjB,IAAIW,EAAMZ,OAAOC,GAEjB,GAAIW,EAAM,IACN,OAAOC,KAAKC,MAAMF,GAAKG,iBACpB,GAAIH,GAAO,KAAQA,EAAM,EAC5B,OAAOA,EAAII,QAAQ,GAAGC,WACnB,GAAIL,EAAM,EAAG,CAEhB,OADqBA,EAAII,QAAQ,IACbT,QAAQ,SAAU,GAC1C,CAAO,OAAKW,MAAMN,GAGX,sBAFIA,EAAIK,UAEa,EAe1B3C,EAAaA,CAAC6C,EAASC,EAAQtB,KACjC,IAAItC,EAAU,GACVC,EAAU,GACVC,EAAW,GAEf,MAAMO,EAAOkD,EAAc,KACrBE,EAAYF,EAAe,MAEjC,IAAK,IAAIG,KAAOrD,EAAM,CAClB,MAAMsD,EAAYtD,EAAKqD,GAAKxB,OAG5B,IAAK,IAAI0B,KAAQH,EACTA,EAAUG,GAAM1B,SAAWyB,IAC3BtD,EAAKqD,GAAKrB,MAAQO,EAAYa,EAAUG,GAAM/B,aAC9CxB,EAAKqD,GAAKG,mBAAqBjB,EAAYa,EAAUG,GAAMC,oBAC3DxD,EAAKqD,GAAKnB,iBAAmBuB,EAAoBL,EAAUG,GAAM/B,YAAa4B,EAAUG,GAAMC,oBAE9E,WAAbF,GACC3D,EAAYK,EAAKqD,GAAKrB,QAK9BsB,EAAUI,WAAW,SAAW1D,EAAKqD,GAAKM,YAAYC,cAAcC,SAASV,KAAuB,QAAXtB,GAA+B,QAAXA,GAC7GtC,EAAQuE,KAAK9D,EAAKqD,IACXC,EAAUI,WAAW,SAAW1D,EAAKqD,GAAKM,YAAYC,cAAcC,SAASV,KAAuB,QAAXtB,GAA+B,QAAXA,GACpHrC,EAAQsE,KAAK9D,EAAKqD,KACXrD,EAAKqD,GAAKM,YAAYC,cAAcC,SAASV,IAAuB,QAAXtB,GAA+B,SAAXA,GACpFpC,EAASqE,KAAK9D,EAAKqD,GAE3B,CAEA/D,EAAgB,CAAEC,UAASC,UAASC,YAAW,EAI7CgE,EAAsBA,CAACzB,EAAO+B,IAC5B/B,EAAQ+B,EACD,WACA/B,EAAQ+B,EACR,aAEJ,eAOX,OACIC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACID,EAAAA,EAAAA,MAAA,OAAKE,UAAU,qBAAoBD,SAAA,EAC/BD,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACIE,EAAAA,EAAAA,KAAA,UAAQC,QAASA,IAAMC,MAAM,0CAAYJ,SAAC,qCAC1CE,EAAAA,EAAAA,KAAA,UAAQC,QAASA,IAAMC,MAAM,yCAAWJ,SAAC,6DACzCE,EAAAA,EAAAA,KAAA,UAAQC,QAASA,IAAMC,MAAM,qBAAqBJ,SAAC,iBAEvDD,EAAAA,EAAAA,MAAA,OAAKM,MAAO,CAACC,QAAS,OAAQC,WAAY,UAAUP,SAAA,EAChDE,EAAAA,EAAAA,KAAA,SACIM,KAAK,OACLC,YAAY,2BACZC,MAAO3F,EACP4F,SA3EEC,IAClB,MAAM1B,EAAS0B,EAAEC,OAAOH,MAAMf,cAC9B3E,EAAckE,GACd9C,EAAWhB,EAAc8D,EAAQhE,EAAe,KA0EpC6E,EAAAA,EAAAA,MAAA,UAAQW,MAAOxF,EAAgByF,SAvEnBC,IACxB,MAAMhD,EAASgD,EAAEC,OAAOH,MACxBvF,EAAkByC,GAClBxB,EAAWhB,EAAcL,EAAY6C,EAAO,EAoE4BoC,SAAA,EACxDE,EAAAA,EAAAA,KAAA,UAAQQ,MAAM,MAAKV,SAAC,iBACpBE,EAAAA,EAAAA,KAAA,UAAQQ,MAAM,MAAKV,SAAC,gBACpBE,EAAAA,EAAAA,KAAA,UAAQQ,MAAM,MAAKV,SAAC,gBACpBE,EAAAA,EAAAA,KAAA,UAAQQ,MAAM,OAAMV,SAAC,0BAKjCD,EAAAA,EAAAA,MAAA,OAAKE,UAAU,eAAcD,SAAA,EACzBD,EAAAA,EAAAA,MAAA,OAAKE,UAAU,cAAaD,SAAA,EACxBD,EAAAA,EAAAA,MAAA,MAAAC,SAAA,CAAI,gBAAc5E,EAAaE,QAAQwF,OAAO,mBAC7C1F,EAAaE,QAAQoC,KAAI,CAACC,EAAMoD,KAC7BhB,EAAAA,EAAAA,MAAA,OAAiBE,UAAW,eAAetC,EAAKM,mBAAmB+B,SAAA,EAC/DD,EAAAA,EAAAA,MAAA,OAAKE,UAAU,cAAaD,SAAA,CAAErC,EAAK+B,YAAY,KAAG/B,EAAKqD,aAAa,QACpEd,EAAAA,EAAAA,KAAA,OAAKD,UAAU,cAAaD,SAAErC,EAAKC,UACnCsC,EAAAA,EAAAA,KAAA,OAAKD,UAAU,eAAcD,SACxBrC,EAAKI,MAAQJ,EAAKI,MAAQ,UAAO,0BAJhCgD,SAUlBhB,EAAAA,EAAAA,MAAA,OAAKE,UAAU,cAAaD,SAAA,EACxBD,EAAAA,EAAAA,MAAA,MAAAC,SAAA,CAAI,gBAAc5E,EAAaG,QAAQuF,OAAO,mBAC7C1F,EAAaG,QAAQmC,KAAI,CAACC,EAAMoD,KAC7BhB,EAAAA,EAAAA,MAAA,OAAiBE,UAAW,eAAetC,EAAKM,mBAAmB+B,SAAA,EAC/DD,EAAAA,EAAAA,MAAA,OAAKE,UAAU,cAAaD,SAAA,CAAErC,EAAK+B,YAAY,KAAG/B,EAAKqD,aAAa,QACpEd,EAAAA,EAAAA,KAAA,OAAKD,UAAU,cAAaD,SAAErC,EAAKC,UACnCmC,EAAAA,EAAAA,MAAA,OAAKE,UAAU,eAAcD,SAAA,CACxBrC,EAAKI,MAAQJ,EAAKI,MAAQ,UAAO,uBAClCmC,EAAAA,EAAAA,KAAA,OAAKG,MAAO,CAACY,SAAU,OAAQC,MAAO,gBAAgBlB,UAC/CvE,EAAWkC,EAAKI,OAAOc,wBAN5BkC,SAalBhB,EAAAA,EAAAA,MAAA,OAAKE,UAAU,cAAaD,SAAA,EACxBD,EAAAA,EAAAA,MAAA,MAAAC,SAAA,CAAI,iBAAe5E,EAAaI,SAASsF,OAAO,mBAC/C1F,EAAaI,SAASkC,KAAI,CAACC,EAAMoD,KAC9BhB,EAAAA,EAAAA,MAAA,OAAiBE,UAAW,eAAetC,EAAKM,mBAAmB+B,SAAA,EAC/DD,EAAAA,EAAAA,MAAA,OAAKE,UAAU,cAAaD,SAAA,CAAErC,EAAK+B,YAAY,KAAG/B,EAAKqD,aAAa,QACpEd,EAAAA,EAAAA,KAAA,OAAKD,UAAU,cAAaD,SAAErC,EAAKC,UACnCsC,EAAAA,EAAAA,KAAA,OAAKD,UAAU,eAAcD,SACxBrC,EAAKI,MAAQJ,EAAKI,MAAQ,0BAJzBgD,aAYlC,C","sources":["pages/upbit/UpbitMainPage.js","api/Api.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { getUpbitList } from '../../api/Api';\r\nimport '../../layouts/css/UpbitMainPage.css';\r\nimport '../../layouts/css/PriceAnimation.css'\r\n\r\nfunction UpbitMainPage() {\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [selectedMarket, setSelectedMarket] = useState('all'); // 필터 상태 추가\r\n    const [filteredData, setFilteredData] = useState({ krwList: [], btcList: [], usdtList: [] });\r\n    const [btcPrice, setBtcPrice] = useState(0);\r\n\r\n    useEffect(() => {\r\n        getUpbitList().then(data => {\r\n            filterData(data, searchTerm, selectedMarket);\r\n        });\r\n    }, [searchTerm, selectedMarket]); // 검색어와 필터가 변경될 때마다 실행\r\n\r\n    useEffect(() => {\r\n        const url = window.location.protocol + '//' + window.location.host;\r\n        const eventSource = new EventSource(url + '/api/sse/price');\r\n\r\n        // Ping을 주기적으로 전송하는 함수\r\n        const pingServer = () => {\r\n            fetch(url + '/api/sse/ping').catch(error => console.error(\"Ping error: \", error));\r\n        };\r\n\r\n        // 30초마다 ping을 보냄\r\n        const pingInterval = setInterval(pingServer, 10000);\r\n\r\n        eventSource.addEventListener(\"price\", (event) => {\r\n            let parsedData = JSON.parse(event.data);\r\n\r\n            if (parsedData.code === 'KRW-BTC') {\r\n                setBtcPrice(parsedData.trade_price); // BTC 가격 상태로 저장\r\n            }\r\n\r\n            // SSE로 수신된 가격 데이터를 filteredData에 업데이트\r\n            setFilteredData(prevData => {\r\n                const updatedKrwList = prevData.krwList.map(item => {\r\n                    if (item.market === parsedData.code) {\r\n                        const oldPrice = Number(item.price);\r\n                        const newPrice = Number(parsedData.trade_price);\r\n                        const priceChangeClass = newPrice > oldPrice ? 'price-up change' : 'price-down change'; // 가격 변화 클래스 결정\r\n\r\n                        setTimeout(() => {\r\n                            setFilteredData(prev => {\r\n                                return {\r\n                                    ...prev,\r\n                                    krwList: prev.krwList.map(i => {\r\n                                        if (i.market === parsedData.code) {\r\n                                            return { ...i, priceChangeClass: priceChangeClass.replace(' change', '') }; // 반짝임 효과 제거\r\n                                        }\r\n                                        return i;\r\n                                    })\r\n                                };\r\n                            });\r\n                        }, 300); // 0.3초 후에 클래스 제거\r\n\r\n                        return {\r\n                            ...item,\r\n                            price: formatPrice(newPrice), // 가격 형식화\r\n                            priceChangeClass: priceChangeClass // 클래스 추가\r\n                        };\r\n                    }\r\n                    return item;\r\n                });\r\n\r\n                return {\r\n                    ...prevData,\r\n                    krwList: updatedKrwList\r\n                };\r\n            });\r\n        });\r\n\r\n        return () => {\r\n            console.log(\"Closing SSE connection\");\r\n            eventSource.close();\r\n            clearInterval(pingInterval); // ping interval 정리\r\n        };\r\n    }, []); // 한 번만 실행\r\n\r\n\r\n    const formatPrice = (price) => {\r\n        // 숫자로 변환 후 소수점 이하 처리\r\n        let num = Number(price);\r\n\r\n        if (num > 1000) {\r\n            return Math.floor(num).toLocaleString(); // 1000원 초과 시 소수점 이하 제거\r\n        } else if (num <= 1000 && num > 1) {\r\n            return num.toFixed(1).toString(); // 1000원 이하일 경우 소수점 1자리까지 표시\r\n        } else if (num < 1) {\r\n            const convertValue = num.toFixed(10);\r\n            return convertValue.replace(/\\.?0+$/, ''); // 1보다 작은 경우 유효한 자리수만 표시\r\n        } else if (!isNaN(num)) {\r\n            return num.toString(); // 지수형 숫자 처리\r\n        }\r\n        return 'Price not available'; // 가격이 0인 경우\r\n    };\r\n\r\n    const handleSearch = (e) => {\r\n        const search = e.target.value.toLowerCase();\r\n        setSearchTerm(search);\r\n        filterData(filteredData, search, selectedMarket);\r\n    };\r\n\r\n    const handleMarketFilter = (e) => {\r\n        const market = e.target.value;\r\n        setSelectedMarket(market);\r\n        filterData(filteredData, searchTerm, market);\r\n    };\r\n\r\n    const filterData = (allData, search, market) => {\r\n        let krwList = [];\r\n        let btcList = [];\r\n        let usdtList = [];\r\n\r\n        const data = allData['COIN'];\r\n        const priceList = allData['PRICE'];\r\n\r\n        for (let key in data) {\r\n            const marketKey = data[key].market;\r\n\r\n            // 가격 초기화\r\n            for (let key2 in priceList) {\r\n                if (priceList[key2].market === marketKey) {\r\n                    data[key].price = formatPrice(priceList[key2].trade_price); // 현재가격\r\n                    data[key].prev_closing_price = formatPrice(priceList[key2].prev_closing_price); // 이전 종가\r\n                    data[key].priceChangeClass = getPriceChangeClass(priceList[key2].trade_price, priceList[key2].prev_closing_price); // 가격 변동 클래스\r\n\r\n                    if(marketKey == 'KRW-BTC'){\r\n                        setBtcPrice(data[key].price)\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (marketKey.startsWith('KRW-') && data[key].korean_name.toLowerCase().includes(search) && (market === 'all' || market === 'krw')) {\r\n                krwList.push(data[key]);\r\n            } else if (marketKey.startsWith('BTC-') && data[key].korean_name.toLowerCase().includes(search) && (market === 'all' || market === 'btc')) {\r\n                btcList.push(data[key]);\r\n            } else if (data[key].korean_name.toLowerCase().includes(search) && (market === 'all' || market === 'usdt')) {\r\n                usdtList.push(data[key]);\r\n            }\r\n        }\r\n\r\n        setFilteredData({ krwList, btcList, usdtList });\r\n    };\r\n\r\n    // CSS 클래스를 설정하는 함수\r\n    const getPriceChangeClass = (price, prevClosingPrice) => {\r\n        if (price > prevClosingPrice) {\r\n            return 'price-up'; // 상승\r\n        } else if (price < prevClosingPrice) {\r\n            return 'price-down'; // 하락\r\n        }\r\n        return 'price-stable'; // 변동 없음\r\n    };\r\n\r\n    // ...이후 리턴문은 그대로 유지\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"search-and-buttons\">\r\n                <div>\r\n                    <button onClick={() => alert('어휴 바보 ㅉㅉ')}>누르면 바보</button>\r\n                    <button onClick={() => alert('나혼자 노는중')}>여기다 무슨기능달지</button>\r\n                    <button onClick={() => alert('Button 3 Clicked!')}>Button 3</button>\r\n                </div>\r\n                <div style={{display: 'flex', alignItems: 'center'}}>\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Search by Korean Name...\"\r\n                        value={searchTerm}\r\n                        onChange={handleSearch}\r\n                    />\r\n                    <select value={selectedMarket} onChange={handleMarketFilter}>\r\n                        <option value=\"all\">All Markets</option>\r\n                        <option value=\"krw\">KRW Market</option>\r\n                        <option value=\"btc\">BTC Market</option>\r\n                        <option value=\"usdt\">USDT Market</option>\r\n                    </select>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"market-lists\">\r\n                <div className=\"market-list\">\r\n                    <h3>KRW Market : {filteredData.krwList.length} 항목</h3>\r\n                    {filteredData.krwList.map((item, index) => (\r\n                        <div key={index} className={`market-item ${item.priceChangeClass}`}>\r\n                            <div className=\"market-name\">{item.korean_name} ({item.english_name})</div>\r\n                            <div className=\"market-code\">{item.market}</div>\r\n                            <div className=\"market-price\">\r\n                                {item.price ? item.price + ' 원' : 'Price not available'}\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n\r\n                <div className=\"market-list\">\r\n                    <h3>BTC Market : {filteredData.btcList.length} 항목</h3>\r\n                    {filteredData.btcList.map((item, index) => (\r\n                        <div key={index} className={`market-item ${item.priceChangeClass}`}>\r\n                            <div className=\"market-name\">{item.korean_name} ({item.english_name})</div>\r\n                            <div className=\"market-code\">{item.market}</div>\r\n                            <div className=\"market-price\">\r\n                                {item.price ? item.price + ' 원' : 'Price not available'}\r\n                                <div style={{fontSize: '10px', color: 'midnightblue'}}>\r\n                                    { (btcPrice * item.price).toLocaleString() }\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n\r\n                <div className=\"market-list\">\r\n                    <h3>USDT Market : {filteredData.usdtList.length} 항목</h3>\r\n                    {filteredData.usdtList.map((item, index) => (\r\n                        <div key={index} className={`market-item ${item.priceChangeClass}`}>\r\n                            <div className=\"market-name\">{item.korean_name} ({item.english_name})</div>\r\n                            <div className=\"market-code\">{item.market}</div>\r\n                            <div className=\"market-price\">\r\n                                {item.price ? item.price : 'Price not available'}\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UpbitMainPage;\r\n","import axios from 'axios';\r\n\r\n// Upbit 리스트를 가져오는 API\r\nexport const getUpbitList = async () => {\r\n    try {\r\n        const res = await axios.get('/api/upbit/priceList');\r\n        return res.data;\r\n    } catch (error) {\r\n        console.error('Failed to fetch Upbit list:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n\r\n// // Upbit 데이터를 가져와서 동기화하는 API\r\n// export const fetchAndSync = async () => {\r\n//     try {\r\n//         const res = await axios.get('/api/upbit/fetchAndSync');\r\n//         return res.data;\r\n//     } catch (error) {\r\n//         console.error('Failed to fetch and sync data:', error);\r\n//         throw error;\r\n//     }\r\n// };\r\n//\r\n// export const fetchPriceAndSync = async () => {\r\n//     try {\r\n//         const res = await axios.get('/api/upbit/pricesync');\r\n//         return res.data;\r\n//     } catch (error) {\r\n//         console.error('Failed to fetch and sync data:', error);\r\n//         throw error;\r\n//     }\r\n// };"],"names":["searchTerm","setSearchTerm","useState","selectedMarket","setSelectedMarket","filteredData","setFilteredData","krwList","btcList","usdtList","btcPrice","setBtcPrice","useEffect","async","axios","get","data","error","console","getUpbitList","then","filterData","url","window","location","protocol","host","eventSource","EventSource","pingInterval","setInterval","pingServer","fetch","catch","addEventListener","event","parsedData","JSON","parse","code","trade_price","prevData","updatedKrwList","map","item","market","oldPrice","Number","price","newPrice","priceChangeClass","setTimeout","prev","i","replace","formatPrice","log","close","clearInterval","num","Math","floor","toLocaleString","toFixed","toString","isNaN","allData","search","priceList","key","marketKey","key2","prev_closing_price","getPriceChangeClass","startsWith","korean_name","toLowerCase","includes","push","prevClosingPrice","_jsxs","children","className","_jsx","onClick","alert","style","display","alignItems","type","placeholder","value","onChange","e","target","length","index","english_name","fontSize","color"],"sourceRoot":""}