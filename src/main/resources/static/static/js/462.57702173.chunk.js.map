{"version":3,"file":"static/js/462.57702173.chunk.js","mappings":"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","sources":["api/Api.js","components/FilterPopup.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Upbit 리스트를 가져오는 API\r\nexport const getUpbitList = async () => {\r\n    try {\r\n        const res = await axios.get('/api/upbit/priceList');\r\n        return res.data;\r\n    } catch (error) {\r\n        console.error('Failed to fetch Upbit list:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n\r\nexport const postUpbitFilterData  = async () => {\r\n    try {\r\n        const res = await axios.get('/api/upbit/filterdata')\r\n        return res.data;\r\n    }catch (error) {\r\n        console.error('Failed to fetch FilterData:', error);\r\n        throw error;\r\n    }\r\n\r\n}","import React, { useState } from 'react';\r\nimport '../css/components/FilterPopup.css';  // 스타일 파일 로드\r\nimport '../index.css';  // 글로벌 CSS 파일 로드\r\nimport { postUpbitFilterData } from '../api/Api';  // 필터 데이터를 서버로 보내는 API 함수\r\n\r\nconst FilterPopup = () => {\r\n    // 필터 상태 관리\r\n    const [filterData, setFilterData] = useState({ priceRange: 0, volume: 0 });\r\n    const [results, setResults] = useState([]); // 서버에서 반환된 결과 저장\r\n\r\n    // 필터 적용 버튼 클릭 시 호출되는 함수\r\n    const applyFilters = async () => {\r\n        try {\r\n            // 서버로 필터 데이터 전송 및 응답 저장\r\n            const response = await postUpbitFilterData(filterData);\r\n            console.log('Filtered data from server:', response);\r\n            setResults(response); // 결과 상태 업데이트\r\n        } catch (error) {\r\n            console.error('Error applying filters:', error);\r\n        }\r\n    };\r\n\r\n    // 필터 초기화 함수\r\n    const resetFilters = () => {\r\n        setFilterData({ priceRange: 0, volume: 0 }); // 필터 초기화\r\n        setResults([]); // 결과 초기화\r\n    };\r\n\r\n    // 가격 범위 변경 핸들러\r\n    const handlePriceRangeChange = (value) => {\r\n        setFilterData((prevState) => ({\r\n            ...prevState,\r\n            priceRange: value,\r\n        }));\r\n    };\r\n\r\n    // 거래량 변경 핸들러\r\n    const handleVolumeChange = (value) => {\r\n        setFilterData((prevState) => ({\r\n            ...prevState,\r\n            volume: value,\r\n        }));\r\n    };\r\n\r\n    return (\r\n        <div className=\"filter-popup-container\">\r\n            <div className=\"filter-popup-info\">\r\n                <h4>필터 설정</h4>\r\n                {/* 가격 범위 설정 */}\r\n                <div className=\"filter-group\">\r\n                    <label>가격 범위:</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min=\"0\"\r\n                        max=\"500\"\r\n                        value={filterData.priceRange}\r\n                        onChange={(e) => handlePriceRangeChange(Number(e.target.value))}\r\n                    />\r\n                    <input\r\n                        type=\"number\"\r\n                        min=\"0\"\r\n                        max=\"500\"\r\n                        value={filterData.priceRange}\r\n                        onChange={(e) => handlePriceRangeChange(Number(e.target.value))}\r\n                    />\r\n                </div>\r\n\r\n                {/* 거래량 설정 */}\r\n                <div className=\"filter-group\">\r\n                    <label>거래량:</label>\r\n                    <input\r\n                        type=\"number\"\r\n                        min=\"0\"\r\n                        value={filterData.volume}\r\n                        onChange={(e) => handleVolumeChange(Number(e.target.value))}\r\n                    />\r\n                </div>\r\n\r\n                {/* 필터 버튼 */}\r\n                <div className=\"button-group\">\r\n                    <button className=\"apply-button\" onClick={applyFilters}>\r\n                        필터 적용\r\n                    </button>\r\n                    <button className=\"reset-button\" onClick={resetFilters}>\r\n                        필터 초기화\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n            {/* 결과 테이블 */}\r\n            <div className=\"filter-popup-result-table\">\r\n                <table>\r\n                    <thead>\r\n                    <tr>\r\n                        <th>종목명</th>\r\n                        <th>현재가</th>\r\n                        <th>거래량</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {results.length > 0 ? (\r\n                        results.map((result, index) => (\r\n                            <tr key={index}>\r\n                                <td>{result.name}</td>\r\n                                <td>{result.price}</td>\r\n                                <td>{result.volume}</td>\r\n                            </tr>\r\n                        ))\r\n                    ) : (\r\n                        <tr>\r\n                            <td colSpan=\"3\">데이터가 없습니다</td>\r\n                        </tr>\r\n                    )}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FilterPopup;\r\n"],"names":["getUpbitList","async","axios","get","data","error","console","postUpbitFilterData","FilterPopup","filterData","setFilterData","useState","priceRange","volume","results","setResults","handlePriceRangeChange","value","prevState","_jsxs","className","children","_jsx","type","min","max","onChange","e","Number","target","handleVolumeChange","onClick","response","log","resetFilters","length","map","result","index","name","price","colSpan"],"sourceRoot":""}