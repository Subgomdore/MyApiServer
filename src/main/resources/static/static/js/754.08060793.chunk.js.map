{"version":3,"file":"static/js/754.08060793.chunk.js","mappings":"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","sources":["components/SearchAndButtons.js","components/MarketList.js","pages/upbit/UpbitMainPage.js","api/Api.js"],"sourcesContent":["import React from 'react';\r\n\r\nfunction SearchAndButtons({ searchTerm, handleSearch, selectedMarket, handleMarketFilter }) {\r\n    return (\r\n        <div className=\"search-and-buttons\">\r\n            <div>\r\n                <button onClick={() => alert('어휴 바보 ㅉㅉ')}>누르면 바보</button>\r\n                <button onClick={() => alert('나혼자 노는중')}>여기다 무슨기능달지</button>\r\n                <button onClick={() => alert('Button 3 Clicked!')}>Button 3</button>\r\n            </div>\r\n            <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Search by Korean Name...\"\r\n                    value={searchTerm}\r\n                    onChange={handleSearch}\r\n                />\r\n                <select value={selectedMarket} onChange={handleMarketFilter}>\r\n                    <option value=\"all\">All Markets</option>\r\n                    <option value=\"krw\">KRW Market</option>\r\n                    <option value=\"btc\">BTC Market</option>\r\n                    <option value=\"usdt\">USDT Market</option>\r\n                </select>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchAndButtons;","import React from 'react';\r\n\r\nfunction MarketList({ title, items, btcPrice }) {\r\n    return (\r\n        <div className=\"market-list\">\r\n            <h3>{title} : {items.length} 항목</h3>\r\n            {items.map((item, index) => (\r\n                <div key={index} className={`market-item ${item.priceChangeClass}`}>\r\n                    <div className=\"market-name\">{item.korean_name} ({item.english_name})</div>\r\n                    <div className=\"market-code\">{item.market}</div>\r\n                    <div className=\"market-price\">\r\n                        {item.price ? item.price + (title === 'KRW Market' ? ' 원' : '') : 'Price not available'}\r\n                        {title === 'BTC Market' && <div style={{ fontSize: '10px', color: 'midnightblue' }}>\r\n                            {(btcPrice * item.price).toLocaleString()}\r\n                        </div>}\r\n                    </div>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MarketList;","// UpbitMainPage.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport { getUpbitList } from '../../api/Api';\r\nimport '../../layouts/css/UpbitMainPage.css';\r\nimport '../../layouts/css/PriceAnimation.css';\r\nimport SearchAndButtons from \"../../components/SearchAndButtons\";\r\nimport MarketList from \"../../components/MarketList\";\r\n\r\nfunction UpbitMainPage() {\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [selectedMarket, setSelectedMarket] = useState('all');\r\n    const [filteredData, setFilteredData] = useState({ krwList: [], btcList: [], usdtList: [] });\r\n    const [btcPrice, setBtcPrice] = useState(0);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const data = await getUpbitList();\r\n            filterAndSetData(data);\r\n        };\r\n        fetchData();\r\n    }, [searchTerm, selectedMarket]);\r\n\r\n    useEffect(() => {\r\n        const eventSource = new EventSource(`${window.location.origin}/api/sse/price`);\r\n\r\n        const pingServer = () => {\r\n            fetch(`${window.location.origin}/api/sse/ping`).catch(console.error);\r\n        };\r\n        const pingInterval = setInterval(pingServer, 10000);\r\n\r\n        eventSource.addEventListener(\"price\", (event) => {\r\n            const parsedData = JSON.parse(event.data);\r\n            if (parsedData.code === 'KRW-BTC') {\r\n                setBtcPrice(parsedData.trade_price);\r\n            }\r\n            updatePrice(parsedData);\r\n        });\r\n\r\n        return () => {\r\n            eventSource.close();\r\n            clearInterval(pingInterval);\r\n        };\r\n    }, []);\r\n\r\n    const formatPrice = (price) => {\r\n        let num = Number(price);\r\n        if (num > 1000) {\r\n            return Math.floor(num).toLocaleString();\r\n        } else if (num <= 1000 && num > 1) {\r\n            return num.toFixed(1).toString();\r\n        } else if (num < 1) {\r\n            return Number(num.toFixed(10)).toString().replace(/\\.0+$/, '');\r\n        }\r\n        return 'Price not available';\r\n    };\r\n\r\n    const handleSearch = (e) => setSearchTerm(e.target.value.toLowerCase());\r\n\r\n    const handleMarketFilter = (e) => setSelectedMarket(e.target.value);\r\n\r\n    const filterAndSetData = (allData) => {\r\n        let krwList = [], btcList = [], usdtList = [];\r\n        const { COIN: data, PRICE: priceList } = allData;\r\n\r\n        for (let key in data) {\r\n            const marketKey = data[key].market;\r\n            const priceInfo = priceList.find(p => p.market === marketKey);\r\n            if (priceInfo) {\r\n                data[key].price = formatPrice(priceInfo.trade_price);\r\n                data[key].prev_closing_price = formatPrice(priceInfo.prev_closing_price);\r\n                data[key].priceChangeClass = getPriceChangeClass(priceInfo.trade_price, priceInfo.prev_closing_price);\r\n                if (marketKey === 'KRW-BTC') setBtcPrice(data[key].price);\r\n            }\r\n            if (filterMarket(data[key], marketKey)) {\r\n                if (marketKey.startsWith('KRW-')) krwList.push(data[key]);\r\n                else if (marketKey.startsWith('BTC-')) btcList.push(data[key]);\r\n                else usdtList.push(data[key]);\r\n            }\r\n        }\r\n        setFilteredData({ krwList, btcList, usdtList });\r\n    };\r\n\r\n    const filterMarket = (data, marketKey) => {\r\n        return data.korean_name.toLowerCase().includes(searchTerm) &&\r\n            (selectedMarket === 'all' ||\r\n                (selectedMarket === 'krw' && marketKey.startsWith('KRW-')) ||\r\n                (selectedMarket === 'btc' && marketKey.startsWith('BTC-')) ||\r\n                (selectedMarket === 'usdt' && marketKey.startsWith('USDT-')));\r\n    };\r\n\r\n    const updatePrice = (parsedData) => {\r\n        setFilteredData(prevData => {\r\n            const updatedKrwList = prevData.krwList.map(item => {\r\n                if (item.market === parsedData.code) {\r\n                    const oldPrice = Number(item.price);\r\n                    const newPrice = Number(parsedData.trade_price);\r\n                    const priceChangeClass = newPrice > oldPrice ? 'price-up change' : 'price-down change';\r\n\r\n                    setTimeout(() => {\r\n                        setFilteredData(prev => ({\r\n                            ...prev,\r\n                            krwList: prev.krwList.map(i => i.market === parsedData.code\r\n                                ? { ...i, priceChangeClass: priceChangeClass.replace(' change', '') }\r\n                                : i)\r\n                        }));\r\n                    }, 300);\r\n                    return {\r\n                        ...item,\r\n                        price: formatPrice(newPrice),\r\n                        priceChangeClass\r\n                    };\r\n                }\r\n                return item;\r\n            });\r\n            return { ...prevData, krwList: updatedKrwList };\r\n        });\r\n    };\r\n\r\n    const getPriceChangeClass = (price, prevClosingPrice) => {\r\n        if (price > prevClosingPrice) return 'price-up';\r\n        if (price < prevClosingPrice) return 'price-down';\r\n        return 'price-stable';\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <SearchAndButtons\r\n                searchTerm={searchTerm}\r\n                handleSearch={handleSearch}\r\n                selectedMarket={selectedMarket}\r\n                handleMarketFilter={handleMarketFilter}\r\n            />\r\n            <div className=\"market-lists\">\r\n                <MarketList title=\"KRW Market\" items={filteredData.krwList} btcPrice={btcPrice} />\r\n                <MarketList title=\"BTC Market\" items={filteredData.btcList} btcPrice={btcPrice} />\r\n                <MarketList title=\"USDT Market\" items={filteredData.usdtList} btcPrice={btcPrice} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UpbitMainPage;","import axios from 'axios';\r\n\r\n// Upbit 리스트를 가져오는 API\r\nexport const getUpbitList = async () => {\r\n    try {\r\n        const res = await axios.get('/api/upbit/priceList');\r\n        return res.data;\r\n    } catch (error) {\r\n        console.error('Failed to fetch Upbit list:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n\r\n// // Upbit 데이터를 가져와서 동기화하는 API\r\n// export const fetchAndSync = async () => {\r\n//     try {\r\n//         const res = await axios.get('/api/upbit/fetchAndSync');\r\n//         return res.data;\r\n//     } catch (error) {\r\n//         console.error('Failed to fetch and sync data:', error);\r\n//         throw error;\r\n//     }\r\n// };\r\n//\r\n// export const fetchPriceAndSync = async () => {\r\n//     try {\r\n//         const res = await axios.get('/api/upbit/pricesync');\r\n//         return res.data;\r\n//     } catch (error) {\r\n//         console.error('Failed to fetch and sync data:', error);\r\n//         throw error;\r\n//     }\r\n// };"],"names":["_ref","searchTerm","handleSearch","selectedMarket","handleMarketFilter","_jsxs","className","children","_jsx","onClick","alert","style","display","alignItems","type","placeholder","value","onChange","title","items","btcPrice","length","map","item","index","priceChangeClass","korean_name","english_name","market","price","fontSize","color","toLocaleString","setSearchTerm","useState","setSelectedMarket","filteredData","setFilteredData","krwList","btcList","usdtList","setBtcPrice","useEffect","async","data","axios","get","error","console","getUpbitList","filterAndSetData","fetchData","eventSource","EventSource","window","location","origin","pingInterval","setInterval","pingServer","fetch","catch","addEventListener","event","parsedData","JSON","parse","code","trade_price","updatePrice","close","clearInterval","formatPrice","num","Number","Math","floor","toFixed","toString","replace","allData","COIN","PRICE","priceList","key","marketKey","priceInfo","find","p","prev_closing_price","getPriceChangeClass","filterMarket","startsWith","push","toLowerCase","includes","prevData","updatedKrwList","oldPrice","newPrice","setTimeout","prev","i","prevClosingPrice","SearchAndButtons","e","target","MarketList"],"sourceRoot":""}