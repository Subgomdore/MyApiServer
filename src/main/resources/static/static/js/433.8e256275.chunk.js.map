{"version":3,"file":"static/js/433.8e256275.chunk.js","mappings":"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","sources":["api/Api.js","pages/upbit/API_1.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Upbit 리스트를 가져오는 API\r\nexport const getUpbitList = async () => {\r\n    try {\r\n        const res = await axios.get('/api/upbit/list');\r\n        return res.data;\r\n    } catch (error) {\r\n        console.error('Failed to fetch Upbit list:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Upbit 데이터를 가져와서 동기화하는 API\r\nexport const fetchAndSync = async () => {\r\n    try {\r\n        const res = await axios.get('/api/upbit/fetchAndSync');\r\n        return res.data;\r\n    } catch (error) {\r\n        console.error('Failed to fetch and sync data:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const fetchPriceAndSync = async () => {\r\n    try {\r\n        const res = await axios.get('/api/upbit/pricesync');\r\n        return res.data;\r\n    } catch (error) {\r\n        console.error('Failed to fetch and sync data:', error);\r\n        throw error;\r\n    }\r\n};","import React, {useEffect, useState} from 'react';\r\nimport {fetchAndSync, fetchPriceAndSync, getUpbitList} from \"../../api/Api\";\r\nimport '../../layouts/css/API_1.css';\r\nimport {useNavigate} from 'react-router-dom';\r\n\r\nfunction API_1(props) {\r\n    const [serverData, setServerData] = useState('');\r\n    const [syncData, setSyncData] = useState(null);\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [selectedMarket, setSelectedMarket] = useState('all'); // 필터 상태 추가\r\n    const [filteredData, setFilteredData] = useState({ krwList: [], btcList: [], usdtList: [] });\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        getUpbitList().then(data => {\r\n            setServerData(data);\r\n            filterData(data, searchTerm, selectedMarket);\r\n        });\r\n    }, [searchTerm, selectedMarket]); // 검색어와 필터가 변경될 때마다 실행\r\n\r\n\r\n    const handleSearch = (e) => {\r\n        const search = e.target.value.toLowerCase();\r\n        setSearchTerm(search);\r\n        filterData(serverData, search, selectedMarket);\r\n    };\r\n\r\n    const handleMarketFilter = (e) => {\r\n        const market = e.target.value;\r\n        setSelectedMarket(market);\r\n        filterData(serverData, searchTerm, market);\r\n    };\r\n\r\n    const handleClick = async (param) => {\r\n        try {\r\n            const data = await param(); // 비동기 함수인 경우 await로 처리\r\n            setSyncData(data); // 데이터를 필요한 상태에 저장하거나 처리\r\n        } catch (error) {\r\n            console.error('Error syncing data:', error);\r\n        }\r\n    };\r\n\r\n    const filterData = (data, search, market) => {\r\n        let krwList = [];\r\n        let btcList = [];\r\n        let usdtList = [];\r\n\r\n        debugger;\r\n        for (let key in data) {\r\n            const marketKey = data[key].market;\r\n            if (\r\n                marketKey.startsWith(\"KRW-\") &&\r\n                data[key].korean_name.toLowerCase().includes(search) &&\r\n                (market === 'all' || market === 'krw')\r\n            ) {\r\n                krwList.push(data[key]);\r\n            } else if (\r\n                marketKey.startsWith(\"BTC-\") &&\r\n                data[key].korean_name.toLowerCase().includes(search) &&\r\n                (market === 'all' || market === 'btc')\r\n            ) {\r\n                btcList.push(data[key]);\r\n            } else if (\r\n                data[key].korean_name.toLowerCase().includes(search) &&\r\n                (market === 'all' || market === 'usdt')\r\n            ) {\r\n                usdtList.push(data[key]);\r\n            }\r\n        }\r\n        setFilteredData({ krwList, btcList, usdtList });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {/* 상단 버튼 및 검색바, 필터 */}\r\n            <div className=\"search-and-buttons\">\r\n                <div>\r\n                    <button onClick={() => handleClick(fetchAndSync)}> 리스트 동기화 </button>\r\n                    <button onClick={() => handleClick(fetchPriceAndSync)}> 가격 가져오기 </button>\r\n                    <button onClick={() => alert(\"Button 3 Clicked!\")}>Button 3</button>\r\n                </div>\r\n                <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Search by Korean Name...\"\r\n                        value={searchTerm}\r\n                        onChange={handleSearch}\r\n                    />\r\n                    {/* 필터 추가 */}\r\n                    <select value={selectedMarket} onChange={handleMarketFilter}>\r\n                        <option value=\"all\">All Markets</option>\r\n                        <option value=\"krw\">KRW Market</option>\r\n                        <option value=\"btc\">BTC Market</option>\r\n                        <option value=\"usdt\">USDT Market</option>\r\n                    </select>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"market-lists\">\r\n                {/* KRW List (좌측) */}\r\n                <div className=\"market-list\">\r\n                    <h3>KRW Market : {filteredData.krwList.length} 항목</h3>\r\n                    {filteredData.krwList.map((item, index) => (\r\n                        <div key={index} className=\"market-item\">\r\n                            <div>{item.korean_name} ({item.english_name})</div>\r\n                            <div>{item.market}</div>\r\n                            <div>{item.price} </div>\r\n                            {/* 가격 칸 추가 */}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n\r\n                {/* BTC List (중앙) */}\r\n                <div className=\"market-list\">\r\n                    <h3>BTC Market : {filteredData.btcList.length} 항목</h3>\r\n                    {filteredData.btcList.map((item, index) => (\r\n                        <div key={index} className=\"market-item\">\r\n                            <div>{item.korean_name} ({item.english_name})</div>\r\n                            <div>{item.market}</div>\r\n                            <div>{item.price} </div>\r\n                            {/* 가격 칸 추가 */}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n\r\n                {/* USDT List (우측) */}\r\n                <div className=\"market-list\">\r\n                    <h3>USDT Market : {filteredData.usdtList.length} 항목</h3>\r\n                    {filteredData.usdtList.map((item, index) => (\r\n                        <div key={index} className=\"market-item\">\r\n                            <div>{item.korean_name} ({item.english_name})</div>\r\n                            <div>{item.market}</div>\r\n                            <div>{item.price} </div>\r\n                            {/* 가격 칸 추가 */}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default API_1;\r\n"],"names":["fetchAndSync","async","axios","get","data","error","console","fetchPriceAndSync","props","serverData","setServerData","useState","syncData","setSyncData","searchTerm","setSearchTerm","selectedMarket","setSelectedMarket","filteredData","setFilteredData","krwList","btcList","usdtList","useNavigate","useEffect","getUpbitList","then","filterData","handleClick","param","search","market","key","marketKey","startsWith","korean_name","toLowerCase","includes","push","_jsxs","children","className","_jsx","onClick","alert","style","display","alignItems","type","placeholder","value","onChange","e","target","length","map","item","index","english_name","price"],"sourceRoot":""}