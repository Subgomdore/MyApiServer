{"version":3,"file":"static/js/754.b6bc482b.chunk.js","mappings":"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","sources":["components/SearchAndButtons.js","components/MarketList.js","pages/upbit/UpbitMainPage.js","api/Api.js"],"sourcesContent":["import React from 'react';\r\n\r\nfunction SearchAndButtons({ searchTerm, handleSearch, selectedMarket, handleMarketFilter }) {\r\n    return (\r\n        <div className=\"search-and-buttons\">\r\n            <div className=\"button-group\">\r\n                <button className=\"custom-button\" onClick={() => alert('어휴 바보 ㅉㅉ')}>누르면 바보</button>\r\n                <button className=\"custom-button\" onClick={() => alert('나혼자 노는중')}>여기다 무슨기능달지</button>\r\n                <button className=\"custom-button\" onClick={() => alert('Button 3 Clicked!')}>Button 3</button>\r\n            </div>\r\n            <div className=\"search-and-filter\">\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Search by Korean Name...\"\r\n                    value={searchTerm}\r\n                    onChange={handleSearch}\r\n                    className=\"search-input\"\r\n                />\r\n                <select value={selectedMarket} onChange={handleMarketFilter} className=\"market-select\">\r\n                    <option value=\"all\">All Markets</option>\r\n                    <option value=\"krw\">KRW Market</option>\r\n                    <option value=\"btc\">BTC Market</option>\r\n                    <option value=\"usdt\">USDT Market</option>\r\n                </select>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchAndButtons;","import React, { useState } from 'react';\r\n\r\nfunction MarketList({ title, items, btcPrice, handleSortByName, handleSortByPrice }) {\r\n    const [nameOrder, setNameOrder] = useState('asc');\r\n    const [codeOrder, setCodeOrder] = useState('asc');\r\n    const [priceOrder, setPriceOrder] = useState('asc');\r\n\r\n    const toggleSortByName = () => {\r\n        const newOrder = nameOrder === 'asc' ? 'desc' : 'asc';\r\n        setNameOrder(newOrder);\r\n        handleSortByName(newOrder);\r\n    };\r\n\r\n    const toggleSortByCode = () => {\r\n        const newOrder = codeOrder === 'asc' ? 'desc' : 'asc';\r\n        setCodeOrder(newOrder);\r\n        handleSortByName(newOrder); // Assuming handleSortByName for code as well, replace if needed\r\n    };\r\n\r\n    const toggleSortByPrice = () => {\r\n        const newOrder = priceOrder === 'asc' ? 'desc' : 'asc';\r\n        setPriceOrder(newOrder);\r\n        handleSortByPrice(newOrder);\r\n    };\r\n\r\n    return (\r\n        <div className=\"market-list\">\r\n            <div className=\"market-list-header\">\r\n                <h3>{title} : {items.length} 항목</h3>\r\n            </div>\r\n            <div className=\"market-items-container\">\r\n                <div className=\"market-item\" style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', gap: '10px', alignItems: 'center' }}>\r\n                    <div className=\"market-name\" style={{ borderRight: '1px solid #ccc', textAlign: 'center' }}>\r\n                        <button className={`sort-button ${nameOrder}`} onClick={toggleSortByName}>\r\n                            이름 정렬 ({nameOrder === 'asc' ? '▲' : '▼'})\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"market-code\" style={{ borderRight: '1px solid #ccc', textAlign: 'center' }}>\r\n                        <button className={`sort-button ${codeOrder}`} onClick={toggleSortByCode}>\r\n                            코인 정렬 ({codeOrder === 'asc' ? '▲' : '▼'})\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"market-price\" style={{ textAlign: 'center' }}>\r\n                        <button className={`sort-button ${priceOrder}`} onClick={toggleSortByPrice}>\r\n                            가격 정렬 ({priceOrder === 'asc' ? '▲' : '▼'})\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n\r\n                {items.map((item, index) => (\r\n                    <div key={index} className={`market-item ${item.priceChangeClass}`} style={{\r\n                        display: 'grid',\r\n                        gridTemplateColumns: '2fr 1fr 1fr',\r\n                        gap: '10px',\r\n                        alignItems: 'center'\r\n                    }}>\r\n                        <div className=\"market-name\" style={{\r\n                            borderRight: '1px solid #ccc',\r\n                            textAlign: 'center'\r\n                        }}>{item.korean_name} ({item.english_name})\r\n                        </div>\r\n                        <div className=\"market-code\"\r\n                             style={{ borderRight: '1px solid #ccc', textAlign: 'center' }}>{item.market}</div>\r\n                        <div className=\"market-price\" style={{ textAlign: 'center' }}>\r\n                            {item.price ? item.price + (title === 'KRW Market' ? ' 원' : '') : 'Price not available'}\r\n                            {title === 'BTC Market' && <div style={{ fontSize: '10px' }}>\r\n                                { ((Number(btcPrice) * Number(item.price)).toLocaleString()).replace(/\\..*$/, '') + ' 원'}\r\n                            </div>}\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MarketList;","// UpbitMainPage.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport { getUpbitList } from '../../api/Api';\r\nimport '../../layouts/css/UpbitMainPage.css';\r\nimport '../../layouts/css/PriceAnimation.css';\r\nimport SearchAndButtons from \"../../components/SearchAndButtons\";\r\nimport MarketList from \"../../components/MarketList\";\r\n\r\nfunction UpbitMainPage() {\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [selectedMarket, setSelectedMarket] = useState('all');\r\n    const [filteredData, setFilteredData] = useState({ krwList: [], btcList: [], usdtList: [] });\r\n    const [btcPrice, setBtcPrice] = useState(0);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const data = await getUpbitList();\r\n            filterAndSetData(data);\r\n        };\r\n        fetchData();\r\n    }, [searchTerm, selectedMarket]);\r\n\r\n    useEffect(() => {\r\n        const eventSource = new EventSource(`${window.location.origin}/api/sse/price`);\r\n\r\n        const pingServer = () => {\r\n            fetch(`${window.location.origin}/api/sse/ping`).catch(console.error);\r\n        };\r\n        const pingInterval = setInterval(pingServer, 10000);\r\n\r\n        eventSource.addEventListener(\"price\", (event) => {\r\n            const parsedData = JSON.parse(event.data);\r\n            if (parsedData.code === 'KRW-BTC') {\r\n                setBtcPrice(parsedData.trade_price);\r\n            }\r\n            updatePrice(parsedData);\r\n        });\r\n\r\n        return () => {\r\n            eventSource.close();\r\n            clearInterval(pingInterval);\r\n        };\r\n    }, []);\r\n\r\n    const formatPrice = (price) => {\r\n        let num = Number(price);\r\n        if (num > 1000) {\r\n            return Math.floor(num).toLocaleString();\r\n        } else if (num <= 1000 && num > 1) {\r\n            return num.toFixed(1).toString();\r\n        } else if (num < 1) {\r\n            return Number(num.toFixed(10)).toString().replace(/\\.0+$/, '');\r\n        }\r\n        return 'Price not available';\r\n    };\r\n\r\n    const handleSearch = (e) => setSearchTerm(e.target.value.toLowerCase());\r\n\r\n    const handleMarketFilter = (e) => setSelectedMarket(e.target.value);\r\n\r\n    const handleSortByName = (listKey, order) => {\r\n        setFilteredData(prevData => ({\r\n            ...prevData,\r\n            [listKey]: [...prevData[listKey]].sort((a, b) => {\r\n                if (order === 'asc') {\r\n                    return a.korean_name.localeCompare(b.korean_name);\r\n                } else {\r\n                    return b.korean_name.localeCompare(a.korean_name);\r\n                }\r\n            })\r\n        }));\r\n    };\r\n\r\n    const handleSortByPrice = (listKey, order) => {\r\n        setFilteredData(prevData => ({\r\n            ...prevData,\r\n            [listKey]: [...prevData[listKey]].sort((a, b) => {\r\n                if (order === 'asc') {\r\n                    return parseFloat(a.price.replace(/,/g, '')) - parseFloat(b.price.replace(/,/g, ''));\r\n                } else {\r\n                    return parseFloat(b.price.replace(/,/g, '')) - parseFloat(a.price.replace(/,/g, ''));\r\n                }\r\n            })\r\n        }));\r\n    };\r\n\r\n    const filterAndSetData = (allData) => {\r\n        let krwList = [], btcList = [], usdtList = [];\r\n        const { COIN: data, PRICE: priceList } = allData;\r\n\r\n        for (let key in data) {\r\n            const marketKey = data[key].market;\r\n            const priceInfo = priceList.find(p => p.market === marketKey);\r\n            if (priceInfo) {\r\n                data[key].price = formatPrice(priceInfo.trade_price);\r\n                data[key].prev_closing_price = formatPrice(priceInfo.prev_closing_price);\r\n                data[key].priceChangeClass = getPriceChangeClass(priceInfo.trade_price, priceInfo.prev_closing_price);\r\n                if (marketKey === 'KRW-BTC') setBtcPrice(data[key].price);\r\n            }\r\n            if (filterMarket(data[key], marketKey)) {\r\n                if (marketKey.startsWith('KRW-')) krwList.push(data[key]);\r\n                else if (marketKey.startsWith('BTC-')) btcList.push(data[key]);\r\n                else usdtList.push(data[key]);\r\n            }\r\n        }\r\n        console.log(btcList)\r\n        setFilteredData({ krwList, btcList, usdtList });\r\n    };\r\n\r\n    const filterMarket = (data, marketKey) => {\r\n        return data.korean_name.toLowerCase().includes(searchTerm) &&\r\n            (selectedMarket === 'all' ||\r\n                (selectedMarket === 'krw' && marketKey.startsWith('KRW-')) ||\r\n                (selectedMarket === 'btc' && marketKey.startsWith('BTC-')) ||\r\n                (selectedMarket === 'usdt' && marketKey.startsWith('USDT-')));\r\n    };\r\n\r\n    const updatePrice = (parsedData) => {\r\n        setFilteredData(prevData => {\r\n            const updatedKrwList = prevData.krwList.map(item => {\r\n                if (item.market === parsedData.code) {\r\n                    const oldPrice = Number(item.price);\r\n                    const newPrice = Number(parsedData.trade_price);\r\n                    const priceChangeClass = newPrice > oldPrice ? 'price-up change' : 'price-down change';\r\n\r\n                    setTimeout(() => {\r\n                        setFilteredData(prev => ({\r\n                            ...prev,\r\n                            krwList: prev.krwList.map(i => i.market === parsedData.code\r\n                                ? { ...i, priceChangeClass: priceChangeClass.replace(' change', '') }\r\n                                : i)\r\n                        }));\r\n                    }, 300);\r\n                    return {\r\n                        ...item,\r\n                        price: formatPrice(newPrice),\r\n                        priceChangeClass\r\n                    };\r\n                }\r\n                return item;\r\n            });\r\n            return { ...prevData, krwList: updatedKrwList };\r\n        });\r\n    };\r\n\r\n    const getPriceChangeClass = (price, prevClosingPrice) => {\r\n        if (price > prevClosingPrice) return 'price-up';\r\n        if (price < prevClosingPrice) return 'price-down';\r\n        return 'price-stable';\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <SearchAndButtons\r\n                searchTerm={searchTerm}\r\n                handleSearch={handleSearch}\r\n                selectedMarket={selectedMarket}\r\n                handleMarketFilter={handleMarketFilter}\r\n            />\r\n            <div className=\"market-lists\">\r\n                <MarketList\r\n                    title=\"KRW Market\"\r\n                    items={filteredData.krwList}\r\n                    btcPrice={btcPrice}\r\n                    handleSortByName={(order) => handleSortByName('krwList', order)}\r\n                    handleSortByPrice={(order) => handleSortByPrice('krwList', order)}\r\n                />\r\n                <MarketList\r\n                    title=\"BTC Market\"\r\n                    items={filteredData.btcList}\r\n                    btcPrice={btcPrice}\r\n                    handleSortByName={(order) => handleSortByName('btcList', order)}\r\n                    handleSortByPrice={(order) => handleSortByPrice('btcList', order)}\r\n                />\r\n                <MarketList\r\n                    title=\"USDT Market\"\r\n                    items={filteredData.usdtList}\r\n                    btcPrice={btcPrice}\r\n                    handleSortByName={(order) => handleSortByName('usdtList', order)}\r\n                    handleSortByPrice={(order) => handleSortByPrice('usdtList', order)}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UpbitMainPage;\r\n","import axios from 'axios';\r\n\r\n// Upbit 리스트를 가져오는 API\r\nexport const getUpbitList = async () => {\r\n    try {\r\n        const res = await axios.get('/api/upbit/priceList');\r\n        return res.data;\r\n    } catch (error) {\r\n        console.error('Failed to fetch Upbit list:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n\r\n// // Upbit 데이터를 가져와서 동기화하는 API\r\n// export const fetchAndSync = async () => {\r\n//     try {\r\n//         const res = await axios.get('/api/upbit/fetchAndSync');\r\n//         return res.data;\r\n//     } catch (error) {\r\n//         console.error('Failed to fetch and sync data:', error);\r\n//         throw error;\r\n//     }\r\n// };\r\n//\r\n// export const fetchPriceAndSync = async () => {\r\n//     try {\r\n//         const res = await axios.get('/api/upbit/pricesync');\r\n//         return res.data;\r\n//     } catch (error) {\r\n//         console.error('Failed to fetch and sync data:', error);\r\n//         throw error;\r\n//     }\r\n// };"],"names":["_ref","searchTerm","handleSearch","selectedMarket","handleMarketFilter","_jsxs","className","children","_jsx","onClick","alert","type","placeholder","value","onChange","title","items","btcPrice","handleSortByName","handleSortByPrice","nameOrder","setNameOrder","useState","codeOrder","setCodeOrder","priceOrder","setPriceOrder","length","style","display","gridTemplateColumns","gap","alignItems","borderRight","textAlign","toggleSortByName","newOrder","toggleSortByCode","toggleSortByPrice","map","item","index","priceChangeClass","korean_name","english_name","market","price","fontSize","Number","toLocaleString","replace","setSearchTerm","setSelectedMarket","filteredData","setFilteredData","krwList","btcList","usdtList","setBtcPrice","useEffect","async","data","axios","get","error","console","getUpbitList","filterAndSetData","fetchData","eventSource","EventSource","window","location","origin","pingInterval","setInterval","pingServer","fetch","catch","addEventListener","event","parsedData","JSON","parse","code","trade_price","updatePrice","close","clearInterval","formatPrice","num","Math","floor","toFixed","toString","listKey","order","prevData","sort","a","b","localeCompare","parseFloat","allData","COIN","PRICE","priceList","key","marketKey","priceInfo","find","p","prev_closing_price","getPriceChangeClass","filterMarket","startsWith","push","log","toLowerCase","includes","updatedKrwList","oldPrice","newPrice","setTimeout","prev","i","prevClosingPrice","SearchAndButtons","e","target","MarketList"],"sourceRoot":""}