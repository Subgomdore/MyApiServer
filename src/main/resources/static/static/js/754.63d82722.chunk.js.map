{"version":3,"file":"static/js/754.63d82722.chunk.js","mappings":"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","sources":["components/SearchAndButtons.js","components/MarketList.js","pages/upbit/UpbitMainPage.js","api/Api.js"],"sourcesContent":["import React from 'react';\r\n\r\nfunction SearchAndButtons({ searchTerm, handleSearch, selectedMarket, handleMarketFilter }) {\r\n    return (\r\n        <div className=\"search-and-buttons\">\r\n            <div className=\"button-group\">\r\n                <button className=\"custom-button\" onClick={() => alert('어휴 바보 ㅉㅉ')}>누르면 바보</button>\r\n                <button className=\"custom-button\" onClick={() => alert('나혼자 노는중')}>여기다 무슨기능달지</button>\r\n                <button className=\"custom-button\" onClick={() => alert('Button 3 Clicked!')}>Button 3</button>\r\n            </div>\r\n            <div className=\"search-and-filter\">\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Search by Korean Name...\"\r\n                    value={searchTerm}\r\n                    onChange={handleSearch}\r\n                    className=\"search-input\"\r\n                />\r\n                <select value={selectedMarket} onChange={handleMarketFilter} className=\"market-select\">\r\n                    <option value=\"all\">All Markets</option>\r\n                    <option value=\"krw\">KRW Market</option>\r\n                    <option value=\"btc\">BTC Market</option>\r\n                    <option value=\"usdt\">USDT Market</option>\r\n                </select>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchAndButtons;","import React, { useState } from 'react';\r\n\r\nfunction MarketList({ title, items, btcPrice, handleSortByName, handleSortByPrice }) {\r\n    const [nameOrder, setNameOrder] = useState('asc');\r\n    const [codeOrder, setCodeOrder] = useState('asc');\r\n    const [priceOrder, setPriceOrder] = useState('asc');\r\n\r\n    const toggleSortByName = () => {\r\n        const newOrder = nameOrder === 'asc' ? 'desc' : 'asc';\r\n        setNameOrder(newOrder);\r\n        handleSortByName(newOrder);\r\n    };\r\n\r\n    const toggleSortByCode = () => {\r\n        const newOrder = codeOrder === 'asc' ? 'desc' : 'asc';\r\n        setCodeOrder(newOrder);\r\n        handleSortByName(newOrder); // Assuming handleSortByName for code as well, replace if needed\r\n    };\r\n\r\n    const toggleSortByPrice = () => {\r\n        const newOrder = priceOrder === 'asc' ? 'desc' : 'asc';\r\n        setPriceOrder(newOrder);\r\n        handleSortByPrice(newOrder);\r\n    };\r\n\r\n    return (\r\n        <div className=\"market-list\">\r\n            <div className=\"market-list-header\">\r\n                <h3>{title} : {items.length} 항목</h3>\r\n            </div>\r\n            <div className=\"market-items-container\">\r\n                <div className=\"market-item\"\r\n                     style={{display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', gap: '10px', alignItems: 'center'}}>\r\n                    <div className=\"market-name\" style={{borderRight: '1px solid #ccc', textAlign: 'center'}}>\r\n                        <button className={`sort-button ${nameOrder}`} onClick={toggleSortByName}>\r\n                            이름 정렬 ({nameOrder === 'asc' ? '▲' : '▼'})\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"market-code\" style={{borderRight: '1px solid #ccc', textAlign: 'center'}}>\r\n                        <button className={`sort-button ${codeOrder}`} onClick={toggleSortByCode}>\r\n                            코인 정렬 ({codeOrder === 'asc' ? '▲' : '▼'})\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"market-price\" style={{textAlign: 'center'}}>\r\n                        <button className={`sort-button ${priceOrder}`} onClick={toggleSortByPrice}>\r\n                            가격 정렬 ({priceOrder === 'asc' ? '▲' : '▼'})\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n\r\n                {items.map((item, index) => (\r\n                    <div key={index} className={`market-item ${item.priceChangeClass}`} style={{\r\n                        display: 'grid',\r\n                        gridTemplateColumns: '2fr 1fr 1fr',\r\n                        gap: '10px',\r\n                        alignItems: 'center'\r\n                    }}>\r\n                        <div className=\"market-name\" style={{\r\n                            borderRight: '1px solid #ccc',\r\n                            textAlign: 'center'\r\n                        }}>{item.korean_name || 'Unknown Name'} <br/>({item.english_name || 'Unknown Name'})\r\n                        </div>\r\n                        <div className=\"market-code\"\r\n                             style={{borderRight: '1px solid #ccc', textAlign: 'center'}}>{item.market || 'N/A'}</div>\r\n                        <div className=\"market-price\" style={{textAlign: 'center'}}>\r\n                            {item.price ? item.price + (title === 'KRW Market' ? ' 원' : '') : 'Price not available'}\r\n                            {title === 'BTC Market' && item.price && btcPrice && (\r\n                                <div style={{fontSize: '10px'}}>\r\n                                    {(btcPrice * parseFloat(item.price)).toLocaleString() + ' 원'}\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MarketList;\r\n","import React, {useEffect, useState} from 'react';\r\nimport {getUpbitList} from '../../api/Api';\r\nimport '../../layouts/css/UpbitMainPage.css';\r\nimport '../../layouts/css/PriceAnimation.css';\r\nimport SearchAndButtons from \"../../components/SearchAndButtons\";\r\nimport MarketList from \"../../components/MarketList\";\r\n\r\nfunction UpbitMainPage() {\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [selectedMarket, setSelectedMarket] = useState('all');\r\n    const [filteredData, setFilteredData] = useState({krwList: [], btcList: [], usdtList: []});\r\n    const [btcPrice, setBtcPrice] = useState(0);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const data = await getUpbitList();\r\n            filterAndSetData(data); // 서버에서 받은 데이터 필드에 맞춰 필터링 및 설정\r\n        };\r\n        fetchData();\r\n    }, [searchTerm, selectedMarket]);\r\n\r\n    useEffect(() => {\r\n        const eventSource = new EventSource(`${window.location.origin}/api/sse/price`);\r\n        console.log(`${window.location.origin}/api/sse/price`)\r\n\r\n        const pingServer = () => {\r\n            fetch(`${window.location.origin}/api/sse/ping`).catch(console.error);\r\n        };\r\n        const pingInterval = setInterval(pingServer, 10000);\r\n\r\n        eventSource.addEventListener(\"price\", (event) => {\r\n            const parsedData = JSON.parse(event.data);\r\n            if (parsedData.market === 'KRW-BTC') {\r\n                setBtcPrice(parsedData.trade_price); // 그대로 사용\r\n            }\r\n            updatePrice(parsedData); // 실시간 가격 업데이트\r\n        });\r\n\r\n        return () => {\r\n            eventSource.close();\r\n            clearInterval(pingInterval);\r\n        };\r\n    }, []);\r\n\r\n    const handleSearch = (e) => setSearchTerm(e.target.value.toLowerCase());\r\n\r\n    const handleMarketFilter = (e) => setSelectedMarket(e.target.value);\r\n\r\n    const handleSortByName = (listKey, order) => {\r\n        setFilteredData(prevData => ({\r\n            ...prevData,\r\n            [listKey]: [...prevData[listKey]].sort((a, b) => {\r\n                if (order === 'asc') {\r\n                    return a.korean_name.localeCompare(b.korean_name);\r\n                } else {\r\n                    return b.korean_name.localeCompare(a.korean_name);\r\n                }\r\n            })\r\n        }));\r\n    };\r\n\r\n    const handleSortByPrice = (listKey, order) => {\r\n        setFilteredData(prevData => ({\r\n            ...prevData,\r\n            [listKey]: [...prevData[listKey]].sort((a, b) => {\r\n                if (order === 'asc') {\r\n                    return parseFloat(a.trade_price) - parseFloat(b.trade_price); // 문자열 그대로 사용\r\n                } else {\r\n                    return parseFloat(b.trade_price) - parseFloat(a.trade_price); // 문자열 그대로 사용\r\n                }\r\n            })\r\n        }));\r\n    };\r\n\r\n    const filterAndSetData = (allData) => {\r\n        let krwList = [], btcList = [], usdtList = [];\r\n\r\n        // allData가 COIN과 PRICE가 아니라 리스트로 들어오는 경우 바로 처리\r\n        allData.forEach((item) => {\r\n            const marketKey = item.market; // 각 아이템의 market 키 사용\r\n            const tradePrice = item.trade_price; // 현재 가격\r\n            const prevClosingPrice = item.prev_closing_price; // 전일 종가\r\n\r\n            item.price = tradePrice; // 가격 설정\r\n            item.prev_closing_price = prevClosingPrice; // 전일 종가 설정\r\n            item.priceChangeClass = getPriceChangeClass(tradePrice, prevClosingPrice); // 가격 변화 클래스 계산\r\n\r\n            // KRW-BTC 가격이면 별도로 저장\r\n            if (marketKey === 'KRW-BTC') {\r\n                setBtcPrice(item.price);\r\n            }\r\n\r\n            // 마켓 필터링하여 각 리스트에 넣음\r\n            if (filterMarket(item, marketKey)) {\r\n                if (marketKey.startsWith('KRW-')) {\r\n                    krwList.push(item);\r\n                } else if (marketKey.startsWith('BTC-')) {\r\n                    btcList.push(item);\r\n                } else if (marketKey.startsWith('USDT-')) {\r\n                    usdtList.push(item);\r\n                }\r\n            }\r\n        });\r\n\r\n        // 필터링된 데이터를 상태로 저장\r\n        setFilteredData({krwList, btcList, usdtList});\r\n    };\r\n\r\n\r\n    const filterMarket = (data, marketKey) => {\r\n        return data.korean_name.toLowerCase().includes(searchTerm) &&\r\n            (selectedMarket === 'all' ||\r\n                (selectedMarket === 'krw' && marketKey.startsWith('KRW-')) ||\r\n                (selectedMarket === 'btc' && marketKey.startsWith('BTC-')) ||\r\n                (selectedMarket === 'usdt' && marketKey.startsWith('USDT-')));\r\n    };\r\n\r\n    const updatePrice = (parsedData) => {\r\n        setFilteredData(prevData => {\r\n            const updatedKrwList = prevData.krwList.map(item => {\r\n                if (item.market === parsedData.market) {\r\n                    const oldPrice = Number(item.price);\r\n                    const newPrice = Number(parsedData.trade_price);\r\n                    const priceChangeClass = newPrice > oldPrice ? 'price-up change' : 'price-down change';\r\n\r\n                    setTimeout(() => {\r\n                        setFilteredData(prev => ({\r\n                            ...prev,\r\n                            krwList: prev.krwList.map(i => i.market === parsedData.market ? {\r\n                                ...i,\r\n                                priceChangeClass: priceChangeClass.replace(' change', '')\r\n                            } : i)\r\n                        }));\r\n                    }, 300);\r\n                    return {\r\n                        ...item,\r\n                        price: newPrice,  // 그대로 사용\r\n                        priceChangeClass\r\n                    };\r\n                }\r\n                return item;\r\n            });\r\n            return {...prevData, krwList: updatedKrwList};\r\n        });\r\n    };\r\n\r\n    const getPriceChangeClass = (price, prevClosingPrice) => {\r\n        if (price > prevClosingPrice) return 'price-up';\r\n        if (price < prevClosingPrice) return 'price-down';\r\n        return 'price-stable';\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <SearchAndButtons\r\n                searchTerm={searchTerm}\r\n                handleSearch={handleSearch}\r\n                selectedMarket={selectedMarket}\r\n                handleMarketFilter={handleMarketFilter}\r\n            />\r\n            <div className=\"market-lists\">\r\n                <MarketList\r\n                    title=\"KRW Market\"\r\n                    items={filteredData.krwList}\r\n                    btcPrice={btcPrice}\r\n                    handleSortByName={(order) => handleSortByName('krwList', order)}\r\n                    handleSortByPrice={(order) => handleSortByPrice('krwList', order)}\r\n                />\r\n                <MarketList\r\n                    title=\"BTC Market\"\r\n                    items={filteredData.btcList}\r\n                    btcPrice={btcPrice}\r\n                    handleSortByName={(order) => handleSortByName('btcList', order)}\r\n                    handleSortByPrice={(order) => handleSortByPrice('btcList', order)}\r\n                />\r\n                <MarketList\r\n                    title=\"USDT Market\"\r\n                    items={filteredData.usdtList}\r\n                    btcPrice={btcPrice}\r\n                    handleSortByName={(order) => handleSortByName('usdtList', order)}\r\n                    handleSortByPrice={(order) => handleSortByPrice('usdtList', order)}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UpbitMainPage;\r\n","import axios from 'axios';\r\n\r\n// Upbit 리스트를 가져오는 API\r\nexport const getUpbitList = async () => {\r\n    try {\r\n        const res = await axios.get('/api/upbit/priceList');\r\n        return res.data;\r\n    } catch (error) {\r\n        console.error('Failed to fetch Upbit list:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n\r\n// // Upbit 데이터를 가져와서 동기화하는 API\r\n// export const fetchAndSync = async () => {\r\n//     try {\r\n//         const res = await axios.get('/api/upbit/fetchAndSync');\r\n//         return res.data;\r\n//     } catch (error) {\r\n//         console.error('Failed to fetch and sync data:', error);\r\n//         throw error;\r\n//     }\r\n// };\r\n//\r\n// export const fetchPriceAndSync = async () => {\r\n//     try {\r\n//         const res = await axios.get('/api/upbit/pricesync');\r\n//         return res.data;\r\n//     } catch (error) {\r\n//         console.error('Failed to fetch and sync data:', error);\r\n//         throw error;\r\n//     }\r\n// };"],"names":["_ref","searchTerm","handleSearch","selectedMarket","handleMarketFilter","_jsxs","className","children","_jsx","onClick","alert","type","placeholder","value","onChange","title","items","btcPrice","handleSortByName","handleSortByPrice","nameOrder","setNameOrder","useState","codeOrder","setCodeOrder","priceOrder","setPriceOrder","length","style","display","gridTemplateColumns","gap","alignItems","borderRight","textAlign","toggleSortByName","newOrder","toggleSortByCode","toggleSortByPrice","map","item","index","priceChangeClass","korean_name","english_name","market","price","fontSize","parseFloat","toLocaleString","setSearchTerm","setSelectedMarket","filteredData","setFilteredData","krwList","btcList","usdtList","setBtcPrice","useEffect","async","data","axios","get","error","console","getUpbitList","filterAndSetData","fetchData","eventSource","EventSource","window","location","origin","log","pingInterval","setInterval","pingServer","fetch","catch","addEventListener","event","parsedData","JSON","parse","trade_price","updatePrice","close","clearInterval","listKey","order","prevData","sort","a","b","localeCompare","allData","forEach","marketKey","tradePrice","prevClosingPrice","prev_closing_price","getPriceChangeClass","filterMarket","startsWith","push","toLowerCase","includes","updatedKrwList","oldPrice","Number","newPrice","setTimeout","prev","i","replace","SearchAndButtons","e","target","MarketList"],"sourceRoot":""}